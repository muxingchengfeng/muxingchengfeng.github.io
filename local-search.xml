<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>经典11 将一棵数或图等划分成大小为k或k+1</title>
    <link href="/2024/09/21/%E7%BB%8F%E5%85%B811-%E5%B0%86%E4%B8%80%E6%A3%B5%E6%95%B0%E6%88%96%E5%9B%BE%E7%AD%89%E5%88%92%E5%88%86%E6%88%90%E5%A4%A7%E5%B0%8F%E4%B8%BAk%E6%88%96k-1/"/>
    <url>/2024/09/21/%E7%BB%8F%E5%85%B811-%E5%B0%86%E4%B8%80%E6%A3%B5%E6%95%B0%E6%88%96%E5%9B%BE%E7%AD%89%E5%88%92%E5%88%86%E6%88%90%E5%A4%A7%E5%B0%8F%E4%B8%BAk%E6%88%96k-1/</url>
    
    <content type="html"><![CDATA[<h1 id="将一棵数或图等划分成大小为k或k-1"><a href="#将一棵数或图等划分成大小为k或k-1" class="headerlink" title="将一棵数或图等划分成大小为k或k+1"></a>将一棵数或图等划分成大小为k或k+1</h1><p>对于这类问题，我们可以发现大小 $min(k, n&#x2F;k) \leq o(\sqrt{n})$ ，所以进行根号分治来解决。</p><p>对于 $k &lt; \sqrt{n}$ ，我们以块大小来处理，反之则以块数处理。时间复杂度 $O(n\sqrt{n})$ 。</p><p>例题：<a href="https://contest.ucup.ac/contest/1472/problem/7895">Graph Partitioning 2</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">constexpr</span> T <span class="hljs-title">power</span><span class="hljs-params">(T a, i64 b)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b /= <span class="hljs-number">2</span>, a *= a) &#123;<br>        <span class="hljs-keyword">if</span> (b % <span class="hljs-number">2</span>) &#123;<br>            res *= a;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">mul</span><span class="hljs-params">(i64 a, i64 b, i64 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    i64 res = a * b - <span class="hljs-built_in">i64</span>(<span class="hljs-number">1.L</span> * a * b / p) * p;<br>    res %= p;<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        res += p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;i64 P&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MLong</span> &#123;<br>    i64 x;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MLong</span><span class="hljs-params">()</span> : x&#123;</span>&#125;<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MLong</span><span class="hljs-params">(i64 x)</span> : x&#123;</span><span class="hljs-built_in">norm</span>(x % <span class="hljs-built_in">getMod</span>())&#125;<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-type">static</span> i64 Mod;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> i64 <span class="hljs-title">getMod</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> P;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(i64 Mod_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Mod = Mod_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">norm</span><span class="hljs-params">(i64 x)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            x += <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">getMod</span>()) &#123;<br>            x -= <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">i64</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span><br>    &#123;<br>        MLong res;<br>        res.x = <span class="hljs-built_in">norm</span>(<span class="hljs-built_in">getMod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> MLong <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">assert</span>(x != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getMod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>*=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">mul</span>(x, rhs.x, <span class="hljs-built_in">getMod</span>());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>+=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x + rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>-=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x - rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>/=(MLong rhs) &amp;<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>*(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res *= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>+(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res += rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>-(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res -= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>/(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res /= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a)<br>    &#123;<br>        i64 v;<br>        is &gt;&gt; v;<br>        a = <span class="hljs-built_in">MLong</span>(v);<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> MLong &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(MLong lhs, MLong rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(MLong lhs, MLong rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() != rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt; i64 MLong&lt;<span class="hljs-number">0LL</span>&gt;::Mod = <span class="hljs-built_in">i64</span>(<span class="hljs-number">1E18</span>) + <span class="hljs-number">9</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> P&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MInt</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MInt</span><span class="hljs-params">()</span> : x&#123;</span>&#125;<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MInt</span><span class="hljs-params">(i64 x)</span> : x&#123;</span><span class="hljs-built_in">norm</span>(x % <span class="hljs-built_in">getMod</span>())&#125;<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> Mod;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">getMod</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> P;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(<span class="hljs-type">int</span> Mod_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Mod = Mod_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">norm</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            x += <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">getMod</span>()) &#123;<br>            x -= <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">int</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span><br>    &#123;<br>        MInt res;<br>        res.x = <span class="hljs-built_in">norm</span>(<span class="hljs-built_in">getMod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> MInt <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">assert</span>(x != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getMod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>*=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-number">1LL</span> * x * rhs.x % <span class="hljs-built_in">getMod</span>();<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>+=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x + rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>-=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x - rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>/=(MInt rhs) &amp;<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>*(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res *= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>+(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res += rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>-(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res -= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>/(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res /= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a)<br>    &#123;<br>        i64 v;<br>        is &gt;&gt; v;<br>        a = <span class="hljs-built_in">MInt</span>(v);<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> MInt &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(MInt lhs, MInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(MInt lhs, MInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() != rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt; <span class="hljs-type">int</span> MInt&lt;<span class="hljs-number">0</span>&gt;::Mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> V, <span class="hljs-type">int</span> P&gt; <span class="hljs-keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="hljs-built_in">MInt</span>&lt;P&gt;(V).<span class="hljs-built_in">inv</span>();<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> P = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> Z = MInt&lt;P&gt;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    std::cin &gt;&gt; n &gt;&gt; k;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> u, v;<br>        std::cin &gt;&gt; u &gt;&gt; v;<br>        adj[u].<span class="hljs-built_in">push_back</span>(v);<br>        adj[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sqrt</span>(n) * <span class="hljs-number">2</span> &gt;= k) &#123;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sz</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        std::vector&lt;std::vector&lt;Z&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;Z&gt;(k + <span class="hljs-number">2</span>));<br>        <span class="hljs-keyword">auto</span> dfs = [&amp;](<span class="hljs-keyword">auto</span> self, <span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa) -&gt; <span class="hljs-type">void</span> &#123;<br>            sz[u] = <span class="hljs-number">1</span>;<br>            dp[u][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : adj[u]) &#123;<br>                <span class="hljs-keyword">if</span> (v == fa) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-built_in">self</span>(self, v, u);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::<span class="hljs-built_in">min</span>(k + <span class="hljs-number">1</span>, sz[u]); i; i--) &#123;<br>                    <span class="hljs-keyword">if</span> (dp[u][i] != <span class="hljs-number">0</span>) &#123;<br>                        Z p = dp[u][i];<br>                        dp[u][i] = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j + i &lt;= k + <span class="hljs-number">1</span>; j++) &#123;<br>                            dp[u][i + j] = dp[u][i + j] + p * dp[v][j];<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                sz[u] += sz[v];<br>            &#125;<br>            dp[u][<span class="hljs-number">0</span>] = dp[u][k] + dp[u][k + <span class="hljs-number">1</span>];<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        std::cout &lt;&lt; dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> m = n / k;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sz</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        std::vector&lt;std::vector&lt;std::vector&lt;Z&gt;&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>, std::vector&lt;std::vector&lt;Z&gt;&gt;(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;Z&gt;(<span class="hljs-number">2</span>)));<br>        <span class="hljs-keyword">auto</span> dfs = [&amp;](<span class="hljs-keyword">auto</span> self, <span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa) -&gt; <span class="hljs-type">void</span> &#123;<br>            sz[u] = <span class="hljs-number">1</span>;<br>            dp[u][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>                dp[u][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : adj[u]) &#123;<br>                <span class="hljs-keyword">if</span> (v == fa) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-built_in">self</span>(self, v, u);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = sz[u] / k; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                    <span class="hljs-keyword">if</span> (dp[u][i][<span class="hljs-number">0</span>] != <span class="hljs-number">0</span> || dp[u][i][<span class="hljs-number">1</span>] != <span class="hljs-number">0</span>) &#123;<br>                        Z p = dp[u][i][<span class="hljs-number">0</span>], q = dp[u][i][<span class="hljs-number">1</span>];<br>                        dp[u][i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>                        dp[u][i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= sz[v] / k; j++) &#123;<br>                            <span class="hljs-type">int</span> s = ((sz[u] - i * k) % (k + <span class="hljs-number">1</span>)) + ((sz[v] - j * k) % (k + <span class="hljs-number">1</span>));<br>                            <span class="hljs-keyword">if</span> (s &gt; k + <span class="hljs-number">1</span>) &#123;<br>                                <span class="hljs-keyword">continue</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (s == k + <span class="hljs-number">1</span>) &#123;<br>                                dp[u][i + j][<span class="hljs-number">1</span>] = dp[u][i + j][<span class="hljs-number">1</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == k) &#123;<br>                                <span class="hljs-keyword">if</span> (((sz[v] - j * k) % (k + <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>) &#123;<br>                                    dp[u][i + j + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = dp[u][i + j + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                                &#125;<br>                                dp[u][i + j][<span class="hljs-number">0</span>] = dp[u][i + j][<span class="hljs-number">0</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                dp[u][i + j][<span class="hljs-number">0</span>] = dp[u][i + j][<span class="hljs-number">0</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (((sz[v] - j * k) % (k + <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &#123;<br>                                dp[u][i + j][<span class="hljs-number">1</span>] = dp[u][i + j][<span class="hljs-number">1</span>] + q * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                sz[u] += sz[v];<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= sz[u] / k; i++) &#123;<br>                dp[u][i][<span class="hljs-number">0</span>] += dp[u][i][<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        Z ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((n - i * k) % (k + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>                ans += dp[<span class="hljs-number">1</span>][i][<span class="hljs-number">0</span>];<br>            &#125;<br>        &#125;<br>        std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-type">int</span> p = t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>(p - t);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典10 给定相同相反关系，询问方案数</title>
    <link href="/2024/09/21/%E7%BB%8F%E5%85%B810-%E7%BB%99%E5%AE%9A%E7%9B%B8%E5%90%8C%E7%9B%B8%E5%8F%8D%E5%85%B3%E7%B3%BB%EF%BC%8C%E8%AF%A2%E9%97%AE%E6%96%B9%E6%A1%88%E6%95%B0/"/>
    <url>/2024/09/21/%E7%BB%8F%E5%85%B810-%E7%BB%99%E5%AE%9A%E7%9B%B8%E5%90%8C%E7%9B%B8%E5%8F%8D%E5%85%B3%E7%B3%BB%EF%BC%8C%E8%AF%A2%E9%97%AE%E6%96%B9%E6%A1%88%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="给定相同相反关系，询问方案数"><a href="#给定相同相反关系，询问方案数" class="headerlink" title="给定相同相反关系，询问方案数"></a>给定相同相反关系，询问方案数</h1><p>我们可以通过建图，对于每个点建立 $i$ 和 $i + n$ ，表示正向和反向。</p><p>对于任意 $i,j$ 如果两者相同，则连边 $(i, j), (i + n, j + n)$，相反则连边 $(i, j + n),(i + n, j)$ 。此时方案数为 $2^{c&#x2F;2}$ 。</p><p>例题：<a href="https://contest.ucup.ac/contest/1472/problem/7900">Gifts from Knowledge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; p, siz;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">p</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">siz</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    &#123;<br>        std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        siz[x] += siz[y];<br>        p[y] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">qpower</span><span class="hljs-params">(T a, i64 b, T init = T(), <span class="hljs-type">int</span> mod = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = init;<br>    <span class="hljs-keyword">if</span> (!mod) &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a;<br>            &#125;<br>            a = a * a;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a % mod;<br>            &#125;<br>            a = a * a % mod;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">std::vector&lt;std::string&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-function">DSU <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-number">2</span> * n)</span></span>;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">b</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                b[j].<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[i][m - <span class="hljs-number">1</span> - j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                b[j].<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b[j].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;0\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b[j].<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b[j][<span class="hljs-number">0</span>] == b[j][<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> x = b[j][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>, y = b[j][<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[b[j][<span class="hljs-number">0</span>]][j] == a[b[j][<span class="hljs-number">1</span>]][j]) &#123;<br>                dsu.<span class="hljs-built_in">merge</span>(x, y + n);<br>                dsu.<span class="hljs-built_in">merge</span>(x + n, y);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dsu.<span class="hljs-built_in">merge</span>(x, y);<br>                dsu.<span class="hljs-built_in">merge</span>(x + n, y + n);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (dsu.<span class="hljs-built_in">same</span>(i, i + n)) &#123;<br>            std::cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    std::set&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;<br>        s.<span class="hljs-built_in">insert</span>(dsu.<span class="hljs-built_in">find</span>(i));<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">qpower</span>&lt;i64&gt;(<span class="hljs-number">2</span>, s.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1E9</span> + <span class="hljs-number">7</span>);<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典9 让区间内数相同的最小操作次数</title>
    <link href="/2024/09/21/%E7%BB%8F%E5%85%B89-%E8%AE%A9%E5%8C%BA%E9%97%B4%E5%86%85%E6%95%B0%E7%9B%B8%E5%90%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/"/>
    <url>/2024/09/21/%E7%BB%8F%E5%85%B89-%E8%AE%A9%E5%8C%BA%E9%97%B4%E5%86%85%E6%95%B0%E7%9B%B8%E5%90%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="让区间内数相同的最小操作次数"><a href="#让区间内数相同的最小操作次数" class="headerlink" title="让区间内数相同的最小操作次数"></a>让区间内数相同的最小操作次数</h1><p>每次指定一个数让其 $+1$ 或 $-1$ ，询问让数组内所有数相同的最小操作次数。</p><p>可以证明将所有数变为中位数时，操作总次数最小。</p><p>对于寻找中位数可以使用离散化 + 树状数组，对顶堆等。</p><p>例题：<a href="https://contest.ucup.ac/contest/1472/problem/7904">Rainbow Subarray</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fenwick</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;T&gt; tr;<br><br>    <span class="hljs-built_in">Fenwick</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">tr</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>            tr[i] += c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(l, c);<br>        <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> &lt;= n)<br>            <span class="hljs-built_in">modify</span>(r + <span class="hljs-number">1</span>, -c);<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T res = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            res += tr[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r) - <span class="hljs-built_in">query</span>(l - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt; sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt;= sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    i64 k;<br>    std::cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        a[i] -= i;<br>        b.<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>    b.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">unique</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>()), b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> m = b.<span class="hljs-built_in">size</span>();<br>    std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        mp[b[i]] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">o</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        o[i] = mp[a[i]];<br>    &#125;<br><br>    <span class="hljs-function">Fenwick&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fenc</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-function">Fenwick&lt;i64&gt; <span class="hljs-title">fens</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">int</span> x) -&gt; <span class="hljs-type">bool</span> &#123;<br>        fenc.<span class="hljs-built_in">modify</span>(o[x], <span class="hljs-number">1</span>);<br>        fens.<span class="hljs-built_in">modify</span>(o[x], a[x]);<br>        <span class="hljs-type">int</span> sum = fenc.<span class="hljs-built_in">query</span>(m);<br>        <span class="hljs-type">int</span> mid = (sum + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> id = fenc.<span class="hljs-built_in">find_first</span>(mid);<br>        i64 prec = fenc.<span class="hljs-built_in">query</span>(id);<br>        i64 sfc = sum - prec;<br>        i64 pres = fens.<span class="hljs-built_in">query</span>(id);<br>        i64 sfs = fens.<span class="hljs-built_in">query</span>(m) - pres;<br>        <span class="hljs-keyword">if</span> (sfs - sfc * b[id - <span class="hljs-number">1</span>] + prec * b[id - <span class="hljs-number">1</span>] - pres &lt;= k) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        fenc.<span class="hljs-built_in">modify</span>(o[x], <span class="hljs-number">-1</span>);<br>        fens.<span class="hljs-built_in">modify</span>(o[x], -a[x]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; <span class="hljs-built_in">check</span>(j + <span class="hljs-number">1</span>)) &#123;<br>            j++;<br>        &#125;<br>        ans = std::<span class="hljs-built_in">max</span>(ans, j - i + <span class="hljs-number">1</span>);<br>        fenc.<span class="hljs-built_in">modify</span>(o[i], <span class="hljs-number">-1</span>);<br>        fens.<span class="hljs-built_in">modify</span>(o[i], -a[i]);<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>The 2023 ICPC Asia Jinan Regional Contest</title>
    <link href="/2024/09/20/The-2023-ICPC-Asia-Jinan-Regional-Contest/"/>
    <url>/2024/09/20/The-2023-ICPC-Asia-Jinan-Regional-Contest/</url>
    
    <content type="html"><![CDATA[<h1 id="The-2023-ICPC-Asia-Jinan-Regional-Contest（A、B、D、E、G、I、K）"><a href="#The-2023-ICPC-Asia-Jinan-Regional-Contest（A、B、D、E、G、I、K）" class="headerlink" title="The 2023 ICPC Asia Jinan Regional Contest（A、B、D、E、G、I、K）"></a>The 2023 ICPC Asia Jinan Regional Contest（A、B、D、E、G、I、K）</h1><h2 id="A-Many-Many-Heads"><a href="#A-Many-Many-Heads" class="headerlink" title="A - Many Many Heads"></a>A - Many Many Heads</h2><p>维护一个栈，顺序遍历序列种每一个括号，如果此时栈非空，且栈顶括号种类等于该括号，则弹出栈顶，否则将该括号压入栈中。这样我们可以得到一个合法序列，并且我们注意到，每一个右括号都放在了可以放到的最左边的位置。</p><p>对于形如 $()()，()<a href=""></a>$ 这样的序列，一定可以形成另一种序列 $(())，(([]))$ 。即如果有两个相同的括号对，那么一定可以形成多种合法序列。</p><p>因此我们对刚才形成的合法序列遍历一次，每次如果当前括号为右括号且栈顶不是对应的左括号，那么可以知道栈顶一定存在合法括号对，我们一直弹出括号对直至栈顶为对应左括号，此时检查弹出段是否有能够形成另一种序列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::string s;<br>    std::cin &gt;&gt; s;<br>    n = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> s1 = <span class="hljs-number">0</span>, s2 = <span class="hljs-number">0</span>;<br>    std::string ss = <span class="hljs-string">&quot;&quot;</span>;<br>    std::stack&lt;<span class="hljs-type">int</span>&gt; st;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;]&#x27;</span> || s[i] == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">empty</span>() || st.<span class="hljs-built_in">top</span>() == <span class="hljs-number">2</span>) &#123;<br>                ss += <span class="hljs-string">&#x27;[&#x27;</span>;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ss += <span class="hljs-string">&#x27;]&#x27;</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">empty</span>() || st.<span class="hljs-built_in">top</span>() == <span class="hljs-number">1</span>) &#123;<br>                ss += <span class="hljs-string">&#x27;(&#x27;</span>;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ss += <span class="hljs-string">&#x27;)&#x27;</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (ss[i] == <span class="hljs-string">&#x27;(&#x27;</span> || ss[i] == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ss[i] == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; (st.<span class="hljs-built_in">top</span>() == <span class="hljs-number">3</span> || st.<span class="hljs-built_in">top</span>() == <span class="hljs-number">4</span>)) &#123;<br>                std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">c</span>(<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>() != <span class="hljs-number">1</span> &amp;&amp; st.<span class="hljs-built_in">top</span>() != <span class="hljs-number">2</span>) &#123;<br>                    st.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-type">int</span> t = st.<span class="hljs-built_in">top</span>();<br>                    c[t]++;<br>                    st.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (c[<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">2</span> || c[<span class="hljs-number">2</span>] &gt;= <span class="hljs-number">2</span>) &#123;<br>                    std::cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ss[i] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<br>        st.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> t = st.<span class="hljs-built_in">top</span>();<br>        c[t]++;<br>        st.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c[<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">2</span> || c[<span class="hljs-number">2</span>] &gt;= <span class="hljs-number">2</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-Graph-Partitioning-2"><a href="#B-Graph-Partitioning-2" class="headerlink" title="B - Graph Partitioning 2"></a>B - Graph Partitioning 2</h2><p>对于 $k \leq \sqrt{n}$ ，直接进行树上背包，状态设为两维，第一维 $i$ 表示当前节点，第二维 $j$ 表示包含当前节点未被切开的大小，转移为 $dp[u][i + j] &#x3D; dp[u][i + j] + dp[u][i] * dp[v][j]$ 。时间复杂度为 $O(n\sqrt{n})$ 。</p><p>对于 $k &gt; \sqrt{n}$ ，我们可以知道最后切分的连通块数小于 $\sqrt{n}$ ，同样进行树上背包，第二维记录以及切出去的块大小为 $k$ 的块数。对于当前节点，是否作为一块大小为 $k$ 或 $k + 1$ 的连通块切分进行讨论。</p><p>我们知道这个节点只能被切出去一次，我们设定两个状态 $dp[i][j][0]$ 表示没有切，$dp[i][j][1]$ 表示已经切分。</p><p>我们在子节点有剩余，且子节点和父节点的剩余恰好为 $k$ 或 $k + 1$ 时进行切分从而维护只切分一次。</p><ul><li>若切分大小为 $k + 1$ ， 此时有 $dp[u][i + j][1] &#x3D; dp[u][i+j][1] + dp[u][i][0] * dp[v][i][0]$ </li><li>若切分大小为 $k$ ， 此时有 $dp[u][i + j + 1][1] &#x3D; dp[u][i+j][1] + dp[u][i][0] * dp[v][i][0]$</li></ul><p>同时注意到若子节点没有剩余，则依然符合当前节点只切分一次，所以有：</p><ul><li>$dp[u][i + j][1] &#x3D; dp[u][i + j][1] + dp[u][i][1] * dp[v][j][0]$ 。</li></ul><p>时间复杂度为 $O(n\sqrt{n})$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">constexpr</span> T <span class="hljs-title">power</span><span class="hljs-params">(T a, i64 b)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b /= <span class="hljs-number">2</span>, a *= a) &#123;<br>        <span class="hljs-keyword">if</span> (b % <span class="hljs-number">2</span>) &#123;<br>            res *= a;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">mul</span><span class="hljs-params">(i64 a, i64 b, i64 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    i64 res = a * b - <span class="hljs-built_in">i64</span>(<span class="hljs-number">1.L</span> * a * b / p) * p;<br>    res %= p;<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        res += p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;i64 P&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MLong</span> &#123;<br>    i64 x;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MLong</span><span class="hljs-params">()</span> : x&#123;</span>&#125;<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MLong</span><span class="hljs-params">(i64 x)</span> : x&#123;</span><span class="hljs-built_in">norm</span>(x % <span class="hljs-built_in">getMod</span>())&#125;<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-type">static</span> i64 Mod;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> i64 <span class="hljs-title">getMod</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> P;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(i64 Mod_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Mod = Mod_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">norm</span><span class="hljs-params">(i64 x)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            x += <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">getMod</span>()) &#123;<br>            x -= <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">i64</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span><br>    &#123;<br>        MLong res;<br>        res.x = <span class="hljs-built_in">norm</span>(<span class="hljs-built_in">getMod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> MLong <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">assert</span>(x != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getMod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>*=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">mul</span>(x, rhs.x, <span class="hljs-built_in">getMod</span>());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>+=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x + rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>-=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x - rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>/=(MLong rhs) &amp;<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>*(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res *= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>+(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res += rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>-(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res -= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>/(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res /= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a)<br>    &#123;<br>        i64 v;<br>        is &gt;&gt; v;<br>        a = <span class="hljs-built_in">MLong</span>(v);<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> MLong &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(MLong lhs, MLong rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(MLong lhs, MLong rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() != rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt; i64 MLong&lt;<span class="hljs-number">0LL</span>&gt;::Mod = <span class="hljs-built_in">i64</span>(<span class="hljs-number">1E18</span>) + <span class="hljs-number">9</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> P&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MInt</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MInt</span><span class="hljs-params">()</span> : x&#123;</span>&#125;<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MInt</span><span class="hljs-params">(i64 x)</span> : x&#123;</span><span class="hljs-built_in">norm</span>(x % <span class="hljs-built_in">getMod</span>())&#125;<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> Mod;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">getMod</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> P;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(<span class="hljs-type">int</span> Mod_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Mod = Mod_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">norm</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            x += <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">getMod</span>()) &#123;<br>            x -= <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">int</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span><br>    &#123;<br>        MInt res;<br>        res.x = <span class="hljs-built_in">norm</span>(<span class="hljs-built_in">getMod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> MInt <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">assert</span>(x != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getMod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>*=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-number">1LL</span> * x * rhs.x % <span class="hljs-built_in">getMod</span>();<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>+=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x + rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>-=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x - rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>/=(MInt rhs) &amp;<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>*(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res *= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>+(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res += rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>-(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res -= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>/(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res /= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a)<br>    &#123;<br>        i64 v;<br>        is &gt;&gt; v;<br>        a = <span class="hljs-built_in">MInt</span>(v);<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> MInt &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(MInt lhs, MInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(MInt lhs, MInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() != rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt; <span class="hljs-type">int</span> MInt&lt;<span class="hljs-number">0</span>&gt;::Mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> V, <span class="hljs-type">int</span> P&gt; <span class="hljs-keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="hljs-built_in">MInt</span>&lt;P&gt;(V).<span class="hljs-built_in">inv</span>();<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> P = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> Z = MInt&lt;P&gt;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    std::cin &gt;&gt; n &gt;&gt; k;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> u, v;<br>        std::cin &gt;&gt; u &gt;&gt; v;<br>        adj[u].<span class="hljs-built_in">push_back</span>(v);<br>        adj[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sqrt</span>(n) * <span class="hljs-number">2</span> &gt;= k) &#123;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sz</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        std::vector&lt;std::vector&lt;Z&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;Z&gt;(k + <span class="hljs-number">2</span>));<br>        <span class="hljs-keyword">auto</span> dfs = [&amp;](<span class="hljs-keyword">auto</span> self, <span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa) -&gt; <span class="hljs-type">void</span> &#123;<br>            sz[u] = <span class="hljs-number">1</span>;<br>            dp[u][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : adj[u]) &#123;<br>                <span class="hljs-keyword">if</span> (v == fa) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-built_in">self</span>(self, v, u);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::<span class="hljs-built_in">min</span>(k + <span class="hljs-number">1</span>, sz[u]); i; i--) &#123;<br>                    <span class="hljs-keyword">if</span> (dp[u][i] != <span class="hljs-number">0</span>) &#123;<br>                        Z p = dp[u][i];<br>                        dp[u][i] = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j + i &lt;= k + <span class="hljs-number">1</span>; j++) &#123;<br>                            dp[u][i + j] = dp[u][i + j] + p * dp[v][j];<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                sz[u] += sz[v];<br>            &#125;<br>            dp[u][<span class="hljs-number">0</span>] = dp[u][k] + dp[u][k + <span class="hljs-number">1</span>];<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        std::cout &lt;&lt; dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> m = n / k;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sz</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        std::vector&lt;std::vector&lt;std::vector&lt;Z&gt;&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>, std::vector&lt;std::vector&lt;Z&gt;&gt;(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;Z&gt;(<span class="hljs-number">2</span>)));<br>        <span class="hljs-keyword">auto</span> dfs = [&amp;](<span class="hljs-keyword">auto</span> self, <span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa) -&gt; <span class="hljs-type">void</span> &#123;<br>            sz[u] = <span class="hljs-number">1</span>;<br>            dp[u][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>                dp[u][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : adj[u]) &#123;<br>                <span class="hljs-keyword">if</span> (v == fa) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-built_in">self</span>(self, v, u);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = sz[u] / k; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                    <span class="hljs-keyword">if</span> (dp[u][i][<span class="hljs-number">0</span>] != <span class="hljs-number">0</span> || dp[u][i][<span class="hljs-number">1</span>] != <span class="hljs-number">0</span>) &#123;<br>                        Z p = dp[u][i][<span class="hljs-number">0</span>], q = dp[u][i][<span class="hljs-number">1</span>];<br>                        dp[u][i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>                        dp[u][i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= sz[v] / k; j++) &#123;<br>                            <span class="hljs-type">int</span> s = ((sz[u] - i * k) % (k + <span class="hljs-number">1</span>)) + ((sz[v] - j * k) % (k + <span class="hljs-number">1</span>));<br>                            <span class="hljs-keyword">if</span> (s &gt; k + <span class="hljs-number">1</span>) &#123;<br>                                <span class="hljs-keyword">continue</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (s == k + <span class="hljs-number">1</span>) &#123;<br>                                dp[u][i + j][<span class="hljs-number">1</span>] = dp[u][i + j][<span class="hljs-number">1</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == k) &#123;<br>                                <span class="hljs-keyword">if</span> (((sz[v] - j * k) % (k + <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>) &#123;<br>                                    dp[u][i + j + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = dp[u][i + j + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                                &#125;<br>                                dp[u][i + j][<span class="hljs-number">0</span>] = dp[u][i + j][<span class="hljs-number">0</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                dp[u][i + j][<span class="hljs-number">0</span>] = dp[u][i + j][<span class="hljs-number">0</span>] + p * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (((sz[v] - j * k) % (k + <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>) &#123;<br>                                dp[u][i + j][<span class="hljs-number">1</span>] = dp[u][i + j][<span class="hljs-number">1</span>] + q * dp[v][j][<span class="hljs-number">0</span>];<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                sz[u] += sz[v];<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= sz[u] / k; i++) &#123;<br>                dp[u][i][<span class="hljs-number">0</span>] += dp[u][i][<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(dfs, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        Z ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((n - i * k) % (k + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>                ans += dp[<span class="hljs-number">1</span>][i][<span class="hljs-number">0</span>];<br>            &#125;<br>        &#125;<br>        std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-type">int</span> p = t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>(p - t);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-Largest-Digit"><a href="#D-Largest-Digit" class="headerlink" title="D - Largest Digit"></a>D - Largest Digit</h2><p>$a + b$ 的值域区间为 $[l_a + l_b,r_a+r_b]$ 。所以当区间长度大于等于 $10$ ，个位数一定会出现 $9$ ，区间小于 $10$ ，直接暴力枚举。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l1, r1, l2, r2;<br>    std::cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;<br>    <span class="hljs-keyword">if</span> (r1 - l1 + <span class="hljs-number">1</span> + r2 - l2 &gt;= <span class="hljs-number">10</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">9</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l1 + l2; i &lt;= r1 + r2; i++) &#123;<br>            <span class="hljs-type">int</span> p = i;<br>            <span class="hljs-keyword">while</span> (p) &#123;<br>                ans = std::<span class="hljs-built_in">max</span>(ans, p % <span class="hljs-number">10</span>);<br>                p /= <span class="hljs-number">10</span>;<br>            &#125;<br>        &#125;<br>        std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="E-I-Just-Want…-One-More…"><a href="#E-I-Just-Want…-One-More…" class="headerlink" title="E - I Just Want… One More…"></a>E - I Just Want… One More…</h2><p>建源 $S$ 向二分图左侧每个点连流量为 1 的边，汇 $T$ 从二分 图右侧每个点连流量为 1 的边，原图的匹配数就是新图的最大流。</p><p> 先求出新图最大流以及对应的残余网络，添加一条边能够提高匹配数当且仅当新的残余网络上源 $S$ 和汇 $T$ 联通。因此 求出源 S 能到达左侧多少点，右侧多少点能到达汇 T，相乘即为答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2E5</span> + <span class="hljs-number">10</span>, maxm = <span class="hljs-number">6E5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> <span class="hljs-type">cost_t</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MaxFlow</span> &#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">cost_t</span> INF = std::numeric_limits&lt;<span class="hljs-type">cost_t</span>&gt;::<span class="hljs-built_in">max</span>() / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> h[maxn], e[maxm], ne[maxm], idx;<br>    <span class="hljs-type">cost_t</span> f[maxm], incf[maxn];<br>    <span class="hljs-type">int</span> q[maxn], cur[maxn];<br>    <span class="hljs-type">int</span> V, S, T;<br><br>    <span class="hljs-built_in">MaxFlow</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= v; i++)<br>            h[i] = <span class="hljs-number">-1</span>;<br>        idx = <span class="hljs-number">0</span>;<br>        V = v, S = s, T = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">cost_t</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>        e[idx] = a, f[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= V; i++) &#123;<br>            incf[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        q[<span class="hljs-number">0</span>] = S, incf[S] = <span class="hljs-number">0</span>, cur[S] = h[S]; <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<br>            <span class="hljs-type">int</span> t = q[hh++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>                <span class="hljs-type">int</span> ver = e[i];<br>                <span class="hljs-keyword">if</span> (incf[ver] == <span class="hljs-number">-1</span> &amp;&amp; f[i]) &#123;<br>                    incf[ver] = incf[t] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 分层</span><br>                    cur[ver] = h[ver];       <span class="hljs-comment">// 弧优化</span><br>                    <span class="hljs-keyword">if</span> (ver == T) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    q[++tt] = ver;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">cost_t</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">cost_t</span> limit)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (u == T) &#123;<br>            <span class="hljs-keyword">return</span> limit;<br>        &#125;<br>        <span class="hljs-type">cost_t</span> flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>            cur[u] = i;<br>            <span class="hljs-type">int</span> ver = e[i];<br>            <span class="hljs-keyword">if</span> (incf[ver] == incf[u] + <span class="hljs-number">1</span> &amp;&amp; f[i]) &#123;<br>                <span class="hljs-type">cost_t</span> t = <span class="hljs-built_in">find</span>(ver, std::<span class="hljs-built_in">min</span>(f[i], limit - flow));<br>                <span class="hljs-keyword">if</span> (!t) &#123;<br>                    incf[ver] = <span class="hljs-number">-1</span>;<br>                &#125;<br>                f[i] -= t, f[i ^ <span class="hljs-number">1</span>] += t, flow += t; <span class="hljs-comment">// 更新网络</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">cost_t</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">cost_t</span> res = <span class="hljs-number">0</span>, flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>            <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF)) &#123;<br>                res += flow;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> S = <span class="hljs-number">0</span>, T = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>;<br>    <span class="hljs-function">MaxFlow&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">flow</span><span class="hljs-params">(T, S, T)</span></span>;<br>    std::set&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v;<br>        std::cin &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-keyword">if</span> (!s.<span class="hljs-built_in">count</span>(&#123;u, v&#125;)) &#123;<br>            s.<span class="hljs-built_in">insert</span>(&#123;u, v&#125;);<br>            flow.<span class="hljs-built_in">add</span>(u, v + n, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        flow.<span class="hljs-built_in">add</span>(S, i, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        flow.<span class="hljs-built_in">add</span>(i + n, T, <span class="hljs-number">1</span>);<br>    &#125;<br>    flow.<span class="hljs-built_in">dinic</span>();<br><br>    i64 s1 = <span class="hljs-number">0</span>, s2 = <span class="hljs-number">0</span>;<br>    std::queue&lt;<span class="hljs-type">int</span>&gt; q, qq;<br>    q.<span class="hljs-built_in">push</span>(S);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(<span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>)</span></span>;<br>    vis[S] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (t &gt;= <span class="hljs-number">1</span> &amp;&amp; t &lt;= n) &#123;<br>            s1++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = flow.h[t]; ~i; i = flow.ne[i]) &#123;<br>            <span class="hljs-type">int</span> v = flow.e[i], w = flow.f[i];<br>            <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (vis[v]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            vis[v] = <span class="hljs-number">1</span>;<br>            q.<span class="hljs-built_in">push</span>(v);<br>        &#125;<br>    &#125;<br><br>    qq.<span class="hljs-built_in">push</span>(T);<br>    vis.<span class="hljs-built_in">assign</span>(<span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    vis[T] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (qq.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> t = qq.<span class="hljs-built_in">front</span>();<br>        qq.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (t &gt;= n + <span class="hljs-number">1</span> &amp;&amp; t &lt;= <span class="hljs-number">2</span> * n) &#123;<br>            s2++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = flow.h[t]; ~i; i = flow.ne[i]) &#123;<br>            <span class="hljs-type">int</span> v = flow.e[i], w = flow.f[i];<br>            <span class="hljs-keyword">if</span> (w == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (vis[v]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            vis[v] = <span class="hljs-number">1</span>;<br>            qq.<span class="hljs-built_in">push</span>(v);<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; s1 * s2 &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G-Gifts-from-Knowledge"><a href="#G-Gifts-from-Knowledge" class="headerlink" title="G - Gifts from Knowledge"></a>G - Gifts from Knowledge</h2><p>对于第 $j$ 列和第 $m-j + 1$ 列总共 $1$ 的数量超过两个，无解。</p><p>假设存在两个 $1$ ，一个位于第 $i$ 行，一个位于第 $j$ 行，则有两种情况。</p><ul><li>位于同一列，则 $i,j$ 的选择情况相反</li><li>位于不同列，则 $i,j$ 的选择情况相同</li></ul><p>介绍两种建图方式：</p><ul><li>对于一张 $2*n$ 个点的图，其中点 $1\leq i\leq n$ ，表示不选了第 $i$ 行，点 $i + n$ 表示不选第 $i$ 行。若 $i,j$ 选择情况相同，则连边 $(i,j )\ (i + n, j + n)$ ，相反则连边 $(i,j + n )\ (i + n, j)$ 。若出现 $i, i + n$ 在同一个连通块，则无解，最终形成 $c$ 块连通块。方案数为 $2^{c&#x2F;2}$ 。使用并查集维护连通块。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; p, siz;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">p</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">siz</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    &#123;<br>        std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        siz[x] += siz[y];<br>        p[y] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">qpower</span><span class="hljs-params">(T a, i64 b, T init = T(), <span class="hljs-type">int</span> mod = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = init;<br>    <span class="hljs-keyword">if</span> (!mod) &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a;<br>            &#125;<br>            a = a * a;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a % mod;<br>            &#125;<br>            a = a * a % mod;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">std::vector&lt;std::string&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-function">DSU <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-number">2</span> * n)</span></span>;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">b</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                b[j].<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[i][m - <span class="hljs-number">1</span> - j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                b[j].<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b[j].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;0\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b[j].<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b[j][<span class="hljs-number">0</span>] == b[j][<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> x = b[j][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>, y = b[j][<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (a[b[j][<span class="hljs-number">0</span>]][j] == a[b[j][<span class="hljs-number">1</span>]][j]) &#123;<br>                dsu.<span class="hljs-built_in">merge</span>(x, y + n);<br>                dsu.<span class="hljs-built_in">merge</span>(x + n, y);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dsu.<span class="hljs-built_in">merge</span>(x, y);<br>                dsu.<span class="hljs-built_in">merge</span>(x + n, y + n);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (dsu.<span class="hljs-built_in">same</span>(i, i + n)) &#123;<br>            std::cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    std::set&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;<br>        s.<span class="hljs-built_in">insert</span>(dsu.<span class="hljs-built_in">find</span>(i));<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">qpower</span>&lt;i64&gt;(<span class="hljs-number">2</span>, s.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1E9</span> + <span class="hljs-number">7</span>);<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>对于一张 $n$ 个点的图。若 $i,j$ 选择情况相同，则连边 $(i,j,0)$ ，相反则连边 $(i,j,1)$ 其中 $0,1$ 表示边权。设每个点点权为 $v$ ，则若出现 $vi$ 异或 $vj$ 不等于路径上边权的异或和，则无解。最终形成 $c$ 块连通块。方案数为 $2^{c}$ 。使用并查集维护连通块。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1E9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">std::vector&lt;std::string&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">b</span>(m);<br>    std::vector&lt;std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                b[j].<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[i][m - <span class="hljs-number">1</span> - j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                b[j].<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b[j].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;0\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b[j].<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b[j][<span class="hljs-number">0</span>] == b[j][<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> x = b[j][<span class="hljs-number">0</span>], y = b[j][<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (a[x][j] == a[y][j]) &#123;<br>                    adj[x + <span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(&#123;y + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;);<br>                    adj[y + <span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(&#123;x + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    adj[x + <span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(&#123;y + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>                    adj[y + <span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(&#123;x + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">c</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-keyword">auto</span> dfs = [&amp;](<span class="hljs-keyword">auto</span> self, <span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> val) -&gt; <span class="hljs-type">void</span> &#123;<br>        vis[u] = <span class="hljs-number">1</span>;<br>        c[u] = val;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : adj[u]) &#123;<br>            <span class="hljs-keyword">if</span> (vis[v]) &#123;<br>                <span class="hljs-keyword">if</span> (c[u] ^ c[v] != w) &#123;<br>                    flag = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">self</span>(self, v, u, val ^ w);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>            ans = ans * <span class="hljs-number">2</span> % mod;<br>            <span class="hljs-built_in">dfs</span>(dfs, i, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>        ans = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="I-Strange-Sorting"><a href="#I-Strange-Sorting" class="headerlink" title="I - Strange Sorting"></a>I - Strange Sorting</h2><p>从左向右，若这个位置上的数不等于下标，设为 $a_i$ ，我们向右找到比这个数小的数且下标最大的数 $a_j$ ，排序后，可知 $i, i+ 1$ ，位置上一定为 $i, i + 1$ ，每次操作一定能排序好两个数，$n&#x2F;2$ 次一定可以排序完整个序列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">o</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        o[a[i]] = i;<br>    &#125;<br>    std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; ans;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, lo = <span class="hljs-number">1</span>, r = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        r = std::<span class="hljs-built_in">max</span>(r, i);<br>        <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = lo; j &lt; a[i]; j++) &#123;<br>            <span class="hljs-keyword">if</span> (o[j] &gt; r) &#123;<br>                mx = std::<span class="hljs-built_in">max</span>(mx, o[j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (mx == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        r = mx;<br>        ans.<span class="hljs-built_in">push_back</span>(&#123;i, mx&#125;);<br>        std::<span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>() + i, a.<span class="hljs-built_in">begin</span>() + mx + <span class="hljs-number">1</span>);<br>        lo = a[i] + <span class="hljs-number">1</span>;<br>    &#125;<br>    std::cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [l, r] : ans) &#123;<br>        std::cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; r &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="K-Rainbow-Subarray"><a href="#K-Rainbow-Subarray" class="headerlink" title="K - Rainbow Subarray"></a>K - Rainbow Subarray</h2><p>双指针，得到以第 $i$ 个数为左区间的最长数组，右区间单调增大。</p><p>我们将序列减去下标得到新的序列 $b$ ，问题等价于将一段数通过操作变成同一个数。我们知道将一段变成他的中位数时操作次数最小。</p><p>维护两个树状数组，一个维护数量 $fenc$ ，一个维护总和 $fens$ 。通过 $fenc$ 找出中位数，可以在 $O(logn)$ 内求出操作需要的最小次数。</p><p>注意到值域较大，需要离散化。</p><p>时间复杂度 $O(nlogn)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fenwick</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;T&gt; tr;<br><br>    <span class="hljs-built_in">Fenwick</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">tr</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>            tr[i] += c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(l, c);<br>        <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> &lt;= n)<br>            <span class="hljs-built_in">modify</span>(r + <span class="hljs-number">1</span>, -c);<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T res = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            res += tr[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r) - <span class="hljs-built_in">query</span>(l - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt; sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt;= sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    i64 k;<br>    std::cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        a[i] -= i;<br>        b.<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>    b.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">unique</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>()), b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> m = b.<span class="hljs-built_in">size</span>();<br>    std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        mp[b[i]] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">o</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        o[i] = mp[a[i]];<br>    &#125;<br><br>    <span class="hljs-function">Fenwick&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fenc</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-function">Fenwick&lt;i64&gt; <span class="hljs-title">fens</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">int</span> x) -&gt; <span class="hljs-type">bool</span> &#123;<br>        fenc.<span class="hljs-built_in">modify</span>(o[x], <span class="hljs-number">1</span>);<br>        fens.<span class="hljs-built_in">modify</span>(o[x], a[x]);<br>        <span class="hljs-type">int</span> sum = fenc.<span class="hljs-built_in">query</span>(m);<br>        <span class="hljs-type">int</span> mid = (sum + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> id = fenc.<span class="hljs-built_in">find_first</span>(mid);<br>        i64 prec = fenc.<span class="hljs-built_in">query</span>(id);<br>        i64 sfc = sum - prec;<br>        i64 pres = fens.<span class="hljs-built_in">query</span>(id);<br>        i64 sfs = fens.<span class="hljs-built_in">query</span>(m) - pres;<br>        <span class="hljs-keyword">if</span> (sfs - sfc * b[id - <span class="hljs-number">1</span>] + prec * b[id - <span class="hljs-number">1</span>] - pres &lt;= k) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        fenc.<span class="hljs-built_in">modify</span>(o[x], <span class="hljs-number">-1</span>);<br>        fens.<span class="hljs-built_in">modify</span>(o[x], -a[x]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; <span class="hljs-built_in">check</span>(j + <span class="hljs-number">1</span>)) &#123;<br>            j++;<br>        &#125;<br>        ans = std::<span class="hljs-built_in">max</span>(ans, j - i + <span class="hljs-number">1</span>);<br>        fenc.<span class="hljs-built_in">modify</span>(o[i], <span class="hljs-number">-1</span>);<br>        fens.<span class="hljs-built_in">modify</span>(o[i], -a[i]);<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>XCPC</category>
      
      <category>2023-2024</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MaxFlow_dinic</title>
    <link href="/2024/09/19/MaxFlow-dinic/"/>
    <url>/2024/09/19/MaxFlow-dinic/</url>
    
    <content type="html"><![CDATA[<h1 id="MaxFlow-dinic"><a href="#MaxFlow-dinic" class="headerlink" title="MaxFlow_dinic"></a>MaxFlow_dinic</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> <span class="hljs-type">cost_t</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MaxFlow</span> &#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">cost_t</span> INF = std::numeric_limits&lt;<span class="hljs-type">cost_t</span>&gt;::<span class="hljs-built_in">max</span>() / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> h[maxn], e[maxm], ne[maxm], idx;<br>    <span class="hljs-type">cost_t</span> f[maxm], incf[maxn];<br>    <span class="hljs-type">int</span> q[maxn], cur[maxn];<br>    <span class="hljs-type">int</span> V, S, T;<br><br>    <span class="hljs-built_in">MaxFlow</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= v; i++)<br>            h[i] = <span class="hljs-number">-1</span>;<br>        idx = <span class="hljs-number">0</span>;<br>        V = v, S = s, T = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">cost_t</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>        e[idx] = a, f[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= V; i++) &#123;<br>            incf[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        q[<span class="hljs-number">0</span>] = S, incf[S] = <span class="hljs-number">0</span>, cur[S] = h[S]; <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<br>            <span class="hljs-type">int</span> t = q[hh++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>                <span class="hljs-type">int</span> ver = e[i];<br>                <span class="hljs-keyword">if</span> (incf[ver] == <span class="hljs-number">-1</span> &amp;&amp; f[i]) &#123;<br>                    incf[ver] = incf[t] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 分层</span><br>                    cur[ver] = h[ver];       <span class="hljs-comment">// 弧优化</span><br>                    <span class="hljs-keyword">if</span> (ver == T) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    q[++tt] = ver;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">cost_t</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">cost_t</span> limit)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (u == T) &#123;<br>            <span class="hljs-keyword">return</span> limit;<br>        &#125;<br>        <span class="hljs-type">cost_t</span> flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>            cur[u] = i;<br>            <span class="hljs-type">int</span> ver = e[i];<br>            <span class="hljs-keyword">if</span> (incf[ver] == incf[u] + <span class="hljs-number">1</span> &amp;&amp; f[i]) &#123;<br>                <span class="hljs-type">cost_t</span> t = <span class="hljs-built_in">find</span>(ver, std::<span class="hljs-built_in">min</span>(f[i], limit - flow));<br>                <span class="hljs-keyword">if</span> (!t) &#123;<br>                    incf[ver] = <span class="hljs-number">-1</span>;<br>                &#125;<br>                f[i] -= t, f[i ^ <span class="hljs-number">1</span>] += t, flow += t; <span class="hljs-comment">// 更新网络</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">cost_t</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">cost_t</span> res = <span class="hljs-number">0</span>, flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>            <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF)) &#123;<br>                res += flow;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Graph Theory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MaxFlow_EK</title>
    <link href="/2024/09/19/MaxFlow-EK/"/>
    <url>/2024/09/19/MaxFlow-EK/</url>
    
    <content type="html"><![CDATA[<h1 id="MaxFlow-EK"><a href="#MaxFlow-EK" class="headerlink" title="MaxFlow_EK"></a>MaxFlow_EK</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> <span class="hljs-type">cost_t</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MaxFlow</span> &#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">cost_t</span> INF = std::numeric_limits&lt;<span class="hljs-type">cost_t</span>&gt;::<span class="hljs-built_in">max</span>() / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> h[maxn], e[maxm], ne[maxm], idx;<br>    <span class="hljs-type">cost_t</span> f[maxm], incf[maxn];<br>    <span class="hljs-type">int</span> q[maxn], pre[maxn];<br>    <span class="hljs-type">bool</span> vis[maxn];<br>    <span class="hljs-type">int</span> V, S, T;<br><br>    <span class="hljs-built_in">MaxFlow</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= v; i++)<br>            h[i] = <span class="hljs-number">-1</span>;<br>        idx = <span class="hljs-number">0</span>;<br>        V = v, S = s, T = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">cost_t</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>        e[idx] = a, f[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= V; i++) &#123;<br>            vis[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        q[<span class="hljs-number">0</span>] = S, vis[S] = <span class="hljs-literal">true</span>, incf[S] = INF;<br>        <span class="hljs-keyword">while</span> (hh &lt;= tt) &#123;<br>            <span class="hljs-type">int</span> t = q[hh++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>                <span class="hljs-type">int</span> ver = e[i];<br>                <span class="hljs-keyword">if</span> (!vis[ver] &amp;&amp; f[i]) &#123;<br>                    vis[ver] = <span class="hljs-literal">true</span>;<br>                    incf[ver] = std::<span class="hljs-built_in">min</span>(incf[t], f[i]); <span class="hljs-comment">// 记录这条可行流的</span><br>                    pre[ver] = i;                        <span class="hljs-comment">// 记录从哪一条边跟新的</span><br>                    <span class="hljs-keyword">if</span> (ver == T)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    q[++tt] = ver;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">cost_t</span> <span class="hljs-title">EK</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">cost_t</span> flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>            flow += incf[T];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="hljs-number">1</span>]) &#123;<br>                f[pre[i]] -= incf[T], f[pre[i] ^ <span class="hljs-number">1</span>] += incf[T]; <span class="hljs-comment">// 跟新残流网络</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Graph Theory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MinCostMaxFlow</title>
    <link href="/2024/09/19/MinCostMaxFlow/"/>
    <url>/2024/09/19/MinCostMaxFlow/</url>
    
    <content type="html"><![CDATA[<h1 id="MinCostMaxFlow"><a href="#MinCostMaxFlow" class="headerlink" title="MinCostMaxFlow"></a>MinCostMaxFlow</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> <span class="hljs-type">cost_t</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MinCostMaxFlow</span> &#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">cost_t</span> INF = std::numeric_limits&lt;<span class="hljs-type">cost_t</span>&gt;::<span class="hljs-built_in">max</span>() / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> h[maxn], e[maxm], ne[maxm], idx;<br>    <span class="hljs-type">cost_t</span> f[maxm], w[maxm], d[maxn], incf[maxn];<br>    <span class="hljs-type">int</span> q[maxn], pre[maxn];<br>    <span class="hljs-type">bool</span> vis[maxn];<br>    <span class="hljs-type">int</span> V, S, T;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= v; i++)<br>            h[i] = <span class="hljs-number">-1</span>;<br>        idx = <span class="hljs-number">0</span>;<br>        V = v, S = s, T = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">cost_t</span> c, <span class="hljs-type">cost_t</span> d)</span></span><br><span class="hljs-function">    </span>&#123;<br>        e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;<br>        e[idx] = a, f[idx] = <span class="hljs-number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= V; i++) &#123;<br>            d[i] = INF;<br>            incf[i] = <span class="hljs-number">0</span>;<br>            vis[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        q[tt++] = S, d[S] = <span class="hljs-number">0</span>, incf[S] = INF;<br>        <span class="hljs-keyword">while</span> (hh != tt) &#123;<br>            <span class="hljs-type">int</span> t = q[hh++];<br>            <span class="hljs-keyword">if</span> (hh == maxn)<br>                hh = <span class="hljs-number">0</span>;<br>            vis[t] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>                <span class="hljs-type">int</span> j = e[i];<br>                <span class="hljs-keyword">if</span> (f[i] &amp;&amp; d[j] &gt; d[t] + w[i]) &#123;<br>                    d[j] = d[t] + w[i];<br>                    incf[j] = std::<span class="hljs-built_in">min</span>(incf[t], f[i]);<br>                    pre[j] = i;<br>                    <span class="hljs-keyword">if</span> (!vis[j]) &#123;<br>                        vis[j] = <span class="hljs-number">1</span>;<br>                        q[tt++] = j;<br>                        <span class="hljs-keyword">if</span> (tt == maxn)<br>                            tt = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> incf[T] &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function">std::pair&lt;<span class="hljs-type">cost_t</span>, <span class="hljs-type">cost_t</span>&gt; <span class="hljs-title">EK</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">cost_t</span> flow = <span class="hljs-number">0</span>, cost = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">spfa</span>()) &#123;<br>            <span class="hljs-type">cost_t</span> t = incf[T];<br>            flow += t, cost += d[T] * t;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="hljs-number">1</span>]) &#123;<br>                f[pre[i]] -= t, f[pre[i] ^ <span class="hljs-number">1</span>] += t;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;flow, cost&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Graph Theory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>The 2024 ICPC Asia East Continent Online Contest (I)</title>
    <link href="/2024/09/18/The-2024-ICPC-Asia-East-Continent-Online-Contest-I/"/>
    <url>/2024/09/18/The-2024-ICPC-Asia-East-Continent-Online-Contest-I/</url>
    
    <content type="html"><![CDATA[<h1 id="The-2024-ICPC-Asia-East-Continent-Online-Contest-I-（A、C、F、G、H、L、M）"><a href="#The-2024-ICPC-Asia-East-Continent-Online-Contest-I-（A、C、F、G、H、L、M）" class="headerlink" title="The 2024 ICPC Asia East Continent Online Contest (I) （A、C、F、G、H、L、M）"></a>The 2024 ICPC Asia East Continent Online Contest (I) （A、C、F、G、H、L、M）</h1><h2 id="A-World-Cup"><a href="#A-World-Cup" class="headerlink" title="A - World Cup"></a>A - World Cup</h2><p>推导一下可得：设自己在 $A$ 组。</p><p>有 $2$ 只队伍比自己弱，可以晋级 $16$ 强。</p><p>此时若为 $A$ 组 $rk2$ ，则对 $B$ 组 $rk1$ ，为 $A$ 组 $rk1$ ，则对 $B$ 组 $rk2$ 。同时自己获胜，所以需要比 $6$ 只队伍强，才可以晋级 $8$ 强。</p><p>此时对上 $C$ 组与 $D$ 组相应获胜的队伍，其同样至少比 $6$ 只队伍强。同时自己获胜，所以需要比 $13$ 只队伍强，可以晋级 $4$ 强。</p><p>此时对上 $EFGH$ 组相应获胜的队伍，其同样至少比 $13$ 只队伍强。同时自己获胜，所以需要比 $27$ 只队伍强，可以晋级 $2$ 强。</p><p>要最终获胜，则要比所有队伍都强。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">33</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">32</span>; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">32</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] &gt; a[i]) &#123;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt &gt;= <span class="hljs-number">31</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt &gt;= <span class="hljs-number">27</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt &gt;= <span class="hljs-number">13</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">4</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt &gt;= <span class="hljs-number">6</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">8</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt &gt;= <span class="hljs-number">2</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">16</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">32</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Permutation-Counting-4"><a href="#C-Permutation-Counting-4" class="headerlink" title="C - Permutation Counting 4"></a>C - Permutation Counting 4</h2><p>构造一个 $n * n$ 的矩阵 $M$ ，将第 $i$ 行的 $l_i$ 列到 $r_i$ 列全部设为 $1$ ，其余为 $0$ ，那么排列数量等价于矩阵 $M$ 的积和式，同时 $per(M)\ mod\ 2 &#x3D; det(M)\ mod\ 2$ 。处理这个矩阵的行列式，我们直接化简，如果满秩，则可知为奇数，否则为偶数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">l</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        std::cin &gt;&gt; x &gt;&gt; y;<br>        l[x].<span class="hljs-built_in">push_back</span>(y);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::<span class="hljs-built_in">sort</span>(l[i].<span class="hljs-built_in">begin</span>(), l[i].<span class="hljs-built_in">end</span>());<br>        l[i].<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">unique</span>(l[i].<span class="hljs-built_in">begin</span>(), l[i].<span class="hljs-built_in">end</span>()), l[i].<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span> (l[i].<span class="hljs-built_in">empty</span>()) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;0\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = l[i].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; m; j++) &#123;<br>            l[l[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(l[i][j]);<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;1\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="F-Make-Max"><a href="#F-Make-Max" class="headerlink" title="F - Make Max"></a>F - Make Max</h2><p>我们可以知道每次操作当前最小的数，让他等于左右两边较小的数，此时操作次数最多。</p><p>使用并查集维护联通块，从小到达枚举即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; p, siz, l, r;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">p</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">siz</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), <span class="hljs-built_in">l</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">r</span>(n + <span class="hljs-number">1</span>)<br>    &#123;<br>        std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        std::<span class="hljs-built_in">iota</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        std::<span class="hljs-built_in">iota</span>(r.<span class="hljs-built_in">begin</span>(), r.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        siz[x] += siz[y];<br>        p[y] = x;<br>        l[x] = std::<span class="hljs-built_in">min</span>(l[x], l[y]);<br>        r[x] = std::<span class="hljs-built_in">max</span>(r[x], r[y]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">2E9</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">o</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    std::<span class="hljs-built_in">iota</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">auto</span> f = [&amp;](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) -&gt; <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> a[x] &lt; a[y]; &#125;;<br>    std::<span class="hljs-built_in">sort</span>(o.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, o.<span class="hljs-built_in">end</span>(), f);<br>    <span class="hljs-function">DSU <span class="hljs-title">dsu</span><span class="hljs-params">(n)</span></span>;<br>    i64 ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> v = o[i];<br>        <span class="hljs-type">int</span> l = dsu.l[v], r = dsu.r[v];<br>        <span class="hljs-type">int</span> ln = INF, rn = INF;<br>        <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">1</span>) &#123;<br>            ln = a[dsu.<span class="hljs-built_in">find</span>(l - <span class="hljs-number">1</span>)];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (r &lt; n) &#123;<br>            rn = a[dsu.<span class="hljs-built_in">find</span>(r + <span class="hljs-number">1</span>)];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ln == INF &amp;&amp; rn == INF) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ln == a[v]) &#123;<br>            dsu.<span class="hljs-built_in">merge</span>(l - <span class="hljs-number">1</span>, v);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rn == a[v]) &#123;<br>            dsu.<span class="hljs-built_in">merge</span>(r + <span class="hljs-number">1</span>, v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (ln &lt;= rn) &#123;<br>                ans += dsu.<span class="hljs-built_in">size</span>(v);<br>                dsu.<span class="hljs-built_in">merge</span>(l - <span class="hljs-number">1</span>, v);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans += dsu.<span class="hljs-built_in">size</span>(v);<br>                dsu.<span class="hljs-built_in">merge</span>(r + <span class="hljs-number">1</span>, v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G-the-Median-of-the-Median-of-the-Median"><a href="#G-the-Median-of-the-Median-of-the-Median" class="headerlink" title="G - the Median of the Median of the Median"></a>G - the Median of the Median of the Median</h2><p>首先用树状数组 $O(n^2logn)$ 暴力预处理出 $b_{l,r}$ 。</p><p>此时二分答案，大于等于设为 $1$ ，小于设为 $0$ ，利用前缀和求出 $c_{l, r}$ ，最终得到 $c$ 中 $0$ 的数量和 $1$ 的数量。</p><p>时间复杂度 $O(n^2logn)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fenwick</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;T&gt; tr;<br><br>    <span class="hljs-built_in">Fenwick</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">tr</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>            tr[i] += c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(l, c);<br>        <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> &lt;= n)<br>            <span class="hljs-built_in">modify</span>(r + <span class="hljs-number">1</span>, -c);<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T res = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            res += tr[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r) - <span class="hljs-built_in">query</span>(l - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt; sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt;= sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">o</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        o[i] = a[i];<br>    &#125;<br>    std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    std::<span class="hljs-built_in">sort</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>());<br>    o.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">unique</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>()), o.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> m = o.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        mp[o[i]] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        b[i] = mp[a[i]];<br>    &#125;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">c</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-function">Fenwick&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fen</span><span class="hljs-params">(m)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j++) &#123;<br>            fen.<span class="hljs-built_in">modify</span>(b[j], <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> p = (j - i + <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            c[i][j] = o[fen.<span class="hljs-built_in">find_first</span>(p)];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1E9</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">cur</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>));<br><br>        <span class="hljs-keyword">auto</span> check = [&amp;]() -&gt; <span class="hljs-type">bool</span> &#123;<br>            <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j++) &#123;<br>                    <span class="hljs-type">int</span> sum = cur[j][j] - cur[j][i - <span class="hljs-number">1</span>] - cur[i - <span class="hljs-number">1</span>][j] + cur[i - <span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>];<br>                    <span class="hljs-type">int</span> len = j - i + <span class="hljs-number">1</span>;<br>                    <span class="hljs-type">int</span> s = (len + <span class="hljs-number">1</span>) * len / <span class="hljs-number">2</span>;<br>                    <span class="hljs-type">int</span> cc = s + <span class="hljs-number">1</span> - (s + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">if</span> (sum &gt;= cc) &#123;<br>                        ans++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">int</span> ss = (n + <span class="hljs-number">1</span>) * n / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (ss + <span class="hljs-number">1</span> - (ss + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> &lt;= ans) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (c[i][j] &gt;= mid) &#123;<br>                    cur[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>                cur[i][j] += cur[i][j - <span class="hljs-number">1</span>] + cur[i - <span class="hljs-number">1</span>][j] - cur[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>()) &#123;<br>            l = mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="H-Rainbow-Bracket-Sequence"><a href="#H-Rainbow-Bracket-Sequence" class="headerlink" title="H - Rainbow Bracket Sequence"></a>H - Rainbow Bracket Sequence</h2><p>由题意转化：</p><ul><li>每个颜色出现 $cnt_i$ 次，每个颜色至少出现 $l_i$ 次。</li><li>第 $i$ 个位置及以前左括号出现次数为 $[(i + 1)&#x2F;2,n]$ 。</li><li>求左括号位置得到的总值最大。</li></ul><p>对于限制条件，我们可以想到使用网络流限制，但上下界费用流较麻烦。</p><p>转化为求右括号位置和的最小值，限制条件则变为：</p><ul><li>每个颜色至多出现 $cnt_i - l_i$ 次，每个颜色至少出现 $0$ 次。</li><li>第 $i$ 个位置及以前左括号出现次数为 $[0,i &#x2F; 2]$ 。</li><li>求左括号位置得到的总值最小。</li></ul><p>这样就将上下界转化为普通的最小费用最大流。</p><ul><li>对于每个颜色点 $2 * n + i$ ，添加边 $(S, 2 * n + i, cnt[i] - l[i], 0)$ ，表示这个颜色位置右括号数量</li><li>对于每个位置点 $i$ ，添加边 $(2 * n + c[i], i, 1, v[i])$ ，表示点 $i$ 是否是右括号</li><li>对于每个位置点 $i$ ，添加边 $(i, i + 1, i &#x2F; 2, 0)$ ，表示前 $i$ 个点右括号数量</li><li>对于点 $2 * n$ ，添加边 $(2 * n, t, n, 0)$ ，表示最多有 $n$ 个右括号</li></ul><p>最后得到 $(flow, cost)$</p><p>当最大流为 $n$ 时有解，$ans &#x3D; sum - cost$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">310</span>, maxm = <span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> <span class="hljs-type">cost_t</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MinCostMaxFlow</span> &#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">cost_t</span> INF = std::numeric_limits&lt;<span class="hljs-type">cost_t</span>&gt;::<span class="hljs-built_in">max</span>() / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> h[maxn], e[maxm], ne[maxm], idx;<br>    <span class="hljs-type">cost_t</span> f[maxm], w[maxm], d[maxn], incf[maxn];<br>    <span class="hljs-type">int</span> q[maxn], pre[maxn];<br>    <span class="hljs-type">bool</span> vis[maxn];<br>    <span class="hljs-type">int</span> V, S, T;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= v; i++)<br>            h[i] = <span class="hljs-number">-1</span>;<br>        idx = <span class="hljs-number">0</span>;<br>        V = v, S = s, T = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">cost_t</span> c, <span class="hljs-type">cost_t</span> d)</span></span><br><span class="hljs-function">    </span>&#123;<br>        e[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;<br>        e[idx] = a, f[idx] = <span class="hljs-number">0</span>, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= V; i++) &#123;<br>            d[i] = INF;<br>            incf[i] = <span class="hljs-number">0</span>;<br>            vis[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        q[tt++] = S, d[S] = <span class="hljs-number">0</span>, incf[S] = INF;<br>        <span class="hljs-keyword">while</span> (hh != tt) &#123;<br>            <span class="hljs-type">int</span> t = q[hh++];<br>            <span class="hljs-keyword">if</span> (hh == maxn)<br>                hh = <span class="hljs-number">0</span>;<br>            vis[t] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>                <span class="hljs-type">int</span> j = e[i];<br>                <span class="hljs-keyword">if</span> (f[i] &amp;&amp; d[j] &gt; d[t] + w[i]) &#123;<br>                    d[j] = d[t] + w[i];<br>                    incf[j] = std::<span class="hljs-built_in">min</span>(incf[t], f[i]);<br>                    pre[j] = i;<br>                    <span class="hljs-keyword">if</span> (!vis[j]) &#123;<br>                        vis[j] = <span class="hljs-number">1</span>;<br>                        q[tt++] = j;<br>                        <span class="hljs-keyword">if</span> (tt == maxn)<br>                            tt = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> incf[T] &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function">std::pair&lt;<span class="hljs-type">cost_t</span>, <span class="hljs-type">cost_t</span>&gt; <span class="hljs-title">EK</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">cost_t</span> flow = <span class="hljs-number">0</span>, cost = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">spfa</span>()) &#123;<br>            <span class="hljs-type">cost_t</span> t = incf[T];<br>            flow += t, cost += d[T] * t;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="hljs-number">1</span>]) &#123;<br>                f[pre[i]] -= t, f[pre[i] ^ <span class="hljs-number">1</span>] += t;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;flow, cost&#125;;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        std::cin &gt;&gt; c[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;<br>        std::cin &gt;&gt; p[i];<br>        cnt[p[i]]++;<br>    &#125;<br>    i64 sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;<br>        std::cin &gt;&gt; v[i];<br>        sum += v[i];<br>    &#125;<br><br>    <span class="hljs-type">int</span> S = <span class="hljs-number">0</span>, T = <span class="hljs-number">2</span> * n + m + <span class="hljs-number">1</span>;<br><br>    MinCostMaxFlow&lt;i64&gt; flow;<br>    flow.<span class="hljs-built_in">init</span>(<span class="hljs-number">2</span> * n + m + <span class="hljs-number">1</span>, S, T);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (cnt[i] &lt; c[i]) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;-1\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        flow.<span class="hljs-built_in">add</span>(S, <span class="hljs-number">2</span> * n + i, cnt[i] - c[i], <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;<br>        flow.<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span> * n + p[i], i, <span class="hljs-number">1</span>, v[i]);<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">2</span> * n) &#123;<br>            flow.<span class="hljs-built_in">add</span>(i, i + <span class="hljs-number">1</span>, i / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            flow.<span class="hljs-built_in">add</span>(i, T, i / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">auto</span> res = flow.<span class="hljs-built_in">EK</span>();<br>    <span class="hljs-keyword">if</span> (res.first != n) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;-1\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; sum - res.second &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="L-Bull-Farm"><a href="#L-Bull-Farm" class="headerlink" title="L - Bull Farm"></a>L - Bull Farm</h2><p>对于每个按钮。</p><p>如果到达的位置不超过 $n - 2$，一定不合法。</p><p>如果刚好是 $n - 1$ 个，一定有两个位置同时到达同一个位置，所以只有在这两个位置中有一个位置为空时，这个按钮可以使用，同时空位置转移到没有出现的那个位置。我们设到达同一个位置的两个位置为 $x_1, x_2$ ，空位置为 $y$ ，则连边 $x_1-&gt;y，x_2-&gt;y$ ，表示空位置可以从 $x_1，x_2$ 转移到 $y$ 。</p><p>如果是 $n$ 个，则形成环，每个空位置 $i$ 可以转移到 $t_i$ ，所以连边 $i-&gt;t_i$ 。</p><p>给每条边一个边权为 $i$ ，即这条边是第 $i$ 个按钮形成的，我们要处理出每个点转移到其他点路径上边权的最大值最小。</p><p>此时有 $n^2$ 条边，难以处理，注意到如果先处理时一个点可以到达另一个点，那么后面再加一条边是无用的。我们可以记录一下连通情况和每个点可以到达的点的情况。这样边的数量只有 $O(n + l)$ ，对于每个点我们跑一遍。处理出到达其他点的路径最大值最小。对于询问直接回答即可。</p><p>时间复杂度 $O(n^2log(n + l) + q)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">1E9</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; p, siz;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">p</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">siz</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    &#123;<br>        std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        siz[x] += siz[y];<br>        p[y] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, q;<br>    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;<br>    std::vector&lt;std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">auto</span> get = [&amp;](<span class="hljs-type">char</span> a, <span class="hljs-type">char</span> b) -&gt; <span class="hljs-type">int</span> &#123;<br>        <span class="hljs-type">int</span> res = (a - <span class="hljs-built_in">char</span>(<span class="hljs-number">48</span>)) * <span class="hljs-number">50</span> + (b - <span class="hljs-built_in">char</span>(<span class="hljs-number">48</span>));<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;;<br><br>    <span class="hljs-function">DSU <span class="hljs-title">dsu</span><span class="hljs-params">(n)</span></span>;<br><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">vis</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        std::string s;<br>        std::cin &gt;&gt; s;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n * <span class="hljs-number">2</span>; j += <span class="hljs-number">2</span>) &#123;<br>            a[j / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = <span class="hljs-built_in">get</span>(s[j], s[j + <span class="hljs-number">1</span>]);<br>            cnt[a[j / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]]++;<br>        &#125;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (cnt[j] &gt; <span class="hljs-number">0</span>) &#123;<br>                sum++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum == n) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (dsu.<span class="hljs-built_in">find</span>(j) != dsu.<span class="hljs-built_in">find</span>(a[j])) &#123;<br>                    dsu.<span class="hljs-built_in">merge</span>(j, a[j]);<br>                    <span class="hljs-keyword">if</span> (!vis[j][a[j]]) &#123;<br>                        vis[j][a[j]] = <span class="hljs-number">1</span>;<br>                        adj[j].<span class="hljs-built_in">push_back</span>(&#123;a[j], i&#125;);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (!vis[a[j]][j]) &#123;<br>                        vis[a[j]][j] = <span class="hljs-number">1</span>;<br>                        adj[a[j]].<span class="hljs-built_in">push_back</span>(&#123;j, i&#125;);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum == n - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> idx = std::<span class="hljs-built_in">find</span>(cnt.<span class="hljs-built_in">begin</span>(), cnt.<span class="hljs-built_in">end</span>(), <span class="hljs-number">2</span>) - cnt.<span class="hljs-built_in">begin</span>();<br>            <span class="hljs-type">int</span> y = std::<span class="hljs-built_in">find</span>(cnt.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, cnt.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>) - cnt.<span class="hljs-built_in">begin</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[j] == idx) &#123;<br>                    <span class="hljs-keyword">if</span> (dsu.<span class="hljs-built_in">find</span>(j) != dsu.<span class="hljs-built_in">find</span>(y)) &#123;<br>                        <span class="hljs-keyword">if</span> (!vis[j][y]) &#123;<br>                            vis[j][y] = <span class="hljs-number">1</span>;<br>                            adj[j].<span class="hljs-built_in">push_back</span>(&#123;y, i&#125;);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>, INF));<br><br>    <span class="hljs-keyword">auto</span> bfs = [&amp;](<span class="hljs-type">int</span> s) -&gt; <span class="hljs-type">void</span> &#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">vis</span>(n + <span class="hljs-number">1</span>);<br>        std::priority_queue&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, std::greater&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; pq;<br>        ans[s][s] = <span class="hljs-number">0</span>;<br>        pq.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, s&#125;);<br><br>        <span class="hljs-keyword">while</span> (pq.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">auto</span> [w, u] = pq.<span class="hljs-built_in">top</span>();<br>            pq.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (vis[u]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            vis[u] = <span class="hljs-number">1</span>;<br>            ans[s][u] = w;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w1] : adj[u]) &#123;<br>                <span class="hljs-keyword">if</span> (vis[v]) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> x = std::<span class="hljs-built_in">max</span>(w, w1);<br>                pq.<span class="hljs-built_in">push</span>(&#123;x, v&#125;);<br>            &#125;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">bfs</span>(i);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        std::string s;<br>        std::cin &gt;&gt; s;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">get</span>(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>]), b = <span class="hljs-built_in">get</span>(s[<span class="hljs-number">2</span>], s[<span class="hljs-number">3</span>]), c = <span class="hljs-built_in">get</span>(s[<span class="hljs-number">4</span>], s[<span class="hljs-number">5</span>]);<br>        <span class="hljs-keyword">if</span> (ans[a][b] &lt;= c) &#123;<br>            std::cout &lt;&lt; <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="M-Find-the-Easiest-Problem"><a href="#M-Find-the-Easiest-Problem" class="headerlink" title="M - Find the Easiest Problem"></a>M - Find the Easiest Problem</h2><p>按照题意模拟即可。</p><p>先记录每个题的过题队伍。再找出过题人数最多且字典序最小的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    std::map&lt;std::string, std::map&lt;std::string, <span class="hljs-type">int</span>&gt;&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::string team, q, res;<br>        std::cin &gt;&gt; team &gt;&gt; q &gt;&gt; res;<br>        <span class="hljs-keyword">if</span> (res[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>            mp[team][q] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, y] : mp) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, v] : y) &#123;<br>            cnt[u[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;A&#x27;</span>]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>, ans = <span class="hljs-number">26</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">25</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (cnt[i] &gt;= c) &#123;<br>            ans = i;<br>            c = cnt[i];<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-built_in">char</span>(<span class="hljs-string">&#x27;A&#x27;</span> + ans) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>XCPC</category>
      
      <category>2024-2025</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>The 2023 ICPC Asia Xi&#39;an Regional Contest</title>
    <link href="/2024/09/10/The-2023-ICPC-Asia-Xi-an-Regional-Contest/"/>
    <url>/2024/09/10/The-2023-ICPC-Asia-Xi-an-Regional-Contest/</url>
    
    <content type="html"><![CDATA[<h1 id="The-2023-ICPC-Asia-Xi’an-Regional-Contest（A、F、G、H、I、N）"><a href="#The-2023-ICPC-Asia-Xi’an-Regional-Contest（A、F、G、H、I、N）" class="headerlink" title="The 2023 ICPC Asia Xi’an Regional Contest（A、F、G、H、I、N）"></a>The 2023 ICPC Asia Xi’an Regional Contest（A、F、G、H、I、N）</h1><h2 id="A-An-Easy-Geometry-Problem"><a href="#A-An-Easy-Geometry-Problem" class="headerlink" title="A - An Easy Geometry Problem"></a>A - An Easy Geometry Problem</h2><p>让 $a_i &#x3D; 2A_i$ 。</p><p>则 $a_{i + r} - a_{i - r} &#x3D; k * (2r) + 2*b$ 。</p><p>即 $(a_{i + r} - k * (i + r)) - (a_{i - r} - k * (i - r)) &#x3D; 2*b$ 。</p><p>维护两颗线段树hash，正向维护 $a_{i - r} - k * (i - r)$ ，反向维护 $A_{i + r} - k * (i + r) - 2b$ 。</p><p>询问最大 $rad(i)$ ，二分即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">constexpr</span> T <span class="hljs-title">power</span><span class="hljs-params">(T a, i64 b)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b /= <span class="hljs-number">2</span>, a *= a) &#123;<br>        <span class="hljs-keyword">if</span> (b % <span class="hljs-number">2</span>) &#123;<br>            res *= a;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">mul</span><span class="hljs-params">(i64 a, i64 b, i64 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    i64 res = a * b - <span class="hljs-built_in">i64</span>(<span class="hljs-number">1.L</span> * a * b / p) * p;<br>    res %= p;<br>    <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-number">0</span>) &#123;<br>        res += p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;i64 P&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MLong</span> &#123;<br>    i64 x;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MLong</span><span class="hljs-params">()</span> : x&#123;</span>&#125;<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MLong</span><span class="hljs-params">(i64 x)</span> : x&#123;</span><span class="hljs-built_in">norm</span>(x % <span class="hljs-built_in">getMod</span>())&#125;<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-type">static</span> i64 Mod;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> i64 <span class="hljs-title">getMod</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> P;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(i64 Mod_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Mod = Mod_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">norm</span><span class="hljs-params">(i64 x)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            x += <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">getMod</span>()) &#123;<br>            x -= <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">i64</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span><br>    &#123;<br>        MLong res;<br>        res.x = <span class="hljs-built_in">norm</span>(<span class="hljs-built_in">getMod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> MLong <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">assert</span>(x != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getMod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>*=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">mul</span>(x, rhs.x, <span class="hljs-built_in">getMod</span>());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>+=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x + rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>-=(MLong rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x - rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MLong &amp;<span class="hljs-keyword">operator</span>/=(MLong rhs) &amp;<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>*(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res *= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>+(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res += rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>-(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res -= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MLong <span class="hljs-keyword">operator</span>/(MLong lhs, MLong rhs)<br>    &#123;<br>        MLong res = lhs;<br>        res /= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a)<br>    &#123;<br>        i64 v;<br>        is &gt;&gt; v;<br>        a = <span class="hljs-built_in">MLong</span>(v);<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> MLong &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(MLong lhs, MLong rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(MLong lhs, MLong rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() != rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt; i64 MLong&lt;<span class="hljs-number">0LL</span>&gt;::Mod = <span class="hljs-built_in">i64</span>(<span class="hljs-number">1E18</span>) + <span class="hljs-number">9</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> P&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MInt</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MInt</span><span class="hljs-params">()</span> : x&#123;</span>&#125;<br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">MInt</span><span class="hljs-params">(i64 x)</span> : x&#123;</span><span class="hljs-built_in">norm</span>(x % <span class="hljs-built_in">getMod</span>())&#125;<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> Mod;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">getMod</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (P &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> P;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(<span class="hljs-type">int</span> Mod_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Mod = Mod_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">norm</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>            x += <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">getMod</span>()) &#123;<br>            x -= <span class="hljs-built_in">getMod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">int</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span><br>    &#123;<br>        MInt res;<br>        res.x = <span class="hljs-built_in">norm</span>(<span class="hljs-built_in">getMod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> MInt <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">assert</span>(x != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">getMod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>*=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-number">1LL</span> * x * rhs.x % <span class="hljs-built_in">getMod</span>();<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>+=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x + rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>-=(MInt rhs) &amp;<br>    &#123;<br>        x = <span class="hljs-built_in">norm</span>(x - rhs.x);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> MInt &amp;<span class="hljs-keyword">operator</span>/=(MInt rhs) &amp;<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>*(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res *= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>+(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res += rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>-(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res -= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> MInt <span class="hljs-keyword">operator</span>/(MInt lhs, MInt rhs)<br>    &#123;<br>        MInt res = lhs;<br>        res /= rhs;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a)<br>    &#123;<br>        i64 v;<br>        is &gt;&gt; v;<br>        a = <span class="hljs-built_in">MInt</span>(v);<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> MInt &amp;a)<br>    &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(MInt lhs, MInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(MInt lhs, MInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() != rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt; <span class="hljs-type">int</span> MInt&lt;<span class="hljs-number">0</span>&gt;::Mod = <span class="hljs-number">1E9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> V, <span class="hljs-type">int</span> P&gt; <span class="hljs-keyword">constexpr</span> MInt&lt;P&gt; CInv = <span class="hljs-built_in">MInt</span>&lt;P&gt;(V).<span class="hljs-built_in">inv</span>();<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> P = <span class="hljs-number">1E9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">using</span> Z = MInt&lt;P&gt;;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> mod1 = <span class="hljs-number">998244353</span>;<br><br>std::vector&lt;Z&gt; p, pre;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>    Z v = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">Info</span>()<br>    &#123;<br>        v = <span class="hljs-number">0</span>;<br>        len = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tag</span> &#123;<br>    <span class="hljs-type">int</span> add = <span class="hljs-number">0</span>;<br>&#125;;<br><br>Info <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Info &amp;a, <span class="hljs-type">const</span> Info &amp;b)<br>&#123;<br>    Info res;<br>    res.len = a.len + b.len;<br>    res.v = a.v * p[b.len] + b.v;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(Info &amp;x, Tag &amp;a, Tag f)</span></span><br><span class="hljs-function"></span>&#123;<br>    x.v = x.v + pre[x.len - <span class="hljs-number">1</span>] * f.add;<br>    a.add += f.add;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tag</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LazySegmentTree</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;Info&gt; info;<br>    std::vector&lt;Tag&gt; tag;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>()<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>(<span class="hljs-type">int</span> n, Info _init = <span class="hljs-built_in">Info</span>())<br>    &#123;<br>        <span class="hljs-built_in">init</span>(std::<span class="hljs-built_in">vector</span>&lt;Info&gt;(n, _init));<br>    &#125;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)<br>    &#123;<br>        <span class="hljs-built_in">init</span>(_init);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)</span></span><br><span class="hljs-function">    </span>&#123;<br>        n = (<span class="hljs-type">int</span>)_init.<span class="hljs-built_in">size</span>();<br>        info.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Info</span>());<br>        tag.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Tag</span>());<br>        std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; build = [&amp;](<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                info[p] = _init[l - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p, l, m);<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">pull</span>(p);<br>        &#125;;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        info[p] = info[<span class="hljs-number">2</span> * p] + info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ::<span class="hljs-built_in">apply</span>(info[p], tag[p], v);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">apply</span>(<span class="hljs-number">2</span> * p, tag[p]);<br>        <span class="hljs-built_in">apply</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, tag[p]);<br>        tag[p] = <span class="hljs-built_in">Tag</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">const</span> Info &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            info[p] = v;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-keyword">if</span> (x &lt;= m) &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p, l, m, x, v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, v);<br>        &#125;<br>        <span class="hljs-built_in">pull</span>(p);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">const</span> Info &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, p, v);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-keyword">return</span> info[p];<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p, l, m, x, y) + <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-built_in">apply</span>(p, v);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p, l, m, x, y, v);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y, v);<br>        <span class="hljs-built_in">pull</span>(p);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, v);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, k, b;<br>    std::cin &gt;&gt; n &gt;&gt; q &gt;&gt; k &gt;&gt; b;<br>    p.<span class="hljs-built_in">assign</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    pre.<span class="hljs-built_in">assign</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    pre[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        p[i] = p[i - <span class="hljs-number">1</span>] * mod1;<br>        pre[i] = pre[i - <span class="hljs-number">1</span>] + p[i];<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;Info&gt; <span class="hljs-title">init1</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        init1[i - <span class="hljs-number">1</span>].v = <span class="hljs-number">2</span> * a[i] - k * i;<br>        init1[i - <span class="hljs-number">1</span>].len = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function">LazySegmentTree&lt;Info, Tag&gt; <span class="hljs-title">segpre</span><span class="hljs-params">(init1)</span></span>;<br>    <span class="hljs-function">std::vector&lt;Info&gt; <span class="hljs-title">init2</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        init2[n - i].v = <span class="hljs-number">2</span> * a[i] - k * i - <span class="hljs-number">2</span> * b;<br>        init2[n - i].len = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function">LazySegmentTree&lt;Info, Tag&gt; <span class="hljs-title">segsf</span><span class="hljs-params">(init2)</span></span>;<br><br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        <span class="hljs-type">int</span> op;<br>        std::cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> l, r, v;<br>            std::cin &gt;&gt; l &gt;&gt; r &gt;&gt; v;<br>            Tag tag&#123;<span class="hljs-number">2</span> * v&#125;;<br>            segpre.<span class="hljs-built_in">modify</span>(l, r, tag);<br>            segsf.<span class="hljs-built_in">modify</span>(n - r + <span class="hljs-number">1</span>, n - l + <span class="hljs-number">1</span>, tag);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> i;<br>            std::cin &gt;&gt; i;<br>            <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = std::<span class="hljs-built_in">min</span>(n - i, i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                Info respre = segpre.<span class="hljs-built_in">query</span>(i - mid, i - <span class="hljs-number">1</span>);<br>                Info ressf = segsf.<span class="hljs-built_in">query</span>(n - (i + mid) + <span class="hljs-number">1</span>, n - (i + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (respre.v == ressf.v) &#123;<br>                    l = mid;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            std::cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="F-An-Easy-Counting-Problem"><a href="#F-An-Easy-Counting-Problem" class="headerlink" title="F - An Easy Counting Problem"></a>F - An Easy Counting Problem</h2><p>根据 $Lucas$ 定理，$C_n^{m}\ mod\ p&#x3D; C_{n&#x2F;p}^{m&#x2F;p} * C_{n%p}^{m%p}\ mod\ p$ 。</p><p>使用 $dp_{i, j}$ 表示填好了前 $i$ 位，组合数值为 $j$ 的方案数，转移式为 $dp[i][j] &#x3D; \sum_{xy\ mod\ p &#x3D; j}dp[i - 1][x] * cnt[y]$ ，$cnt_y$ 表示 $k &#x3D; 1$ 时的方案数，这部分暴力预处理 $O(p^2)$ 。</p><p>直接进行转移复杂度为 $O(kp^2)$ ，注意到过程满足结合律，使用快速幂的思想优化到 $O(p^2logk)$ 。同时对下标取离散对数后使用多项式优化到 $O(plogplogk)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5001</span>;<br><br><span class="hljs-type">int</span> c[N][N];<br><span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>            <span class="hljs-keyword">if</span> (!j)<br>                c[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % p; <span class="hljs-comment">// 一个公式</span><br>&#125;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_factors</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-comment">// 求所有因数</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * i &lt;= a; ++i)<br>        <span class="hljs-keyword">if</span> (a % i == <span class="hljs-number">0</span>) &#123;<br>            v.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i * i != a)<br>                v.<span class="hljs-built_in">push_back</span>(a / i);<br>        &#125;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">qpower</span><span class="hljs-params">(T a, i64 b, T init = T(), <span class="hljs-type">int</span> mod = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = init;<br>    <span class="hljs-keyword">if</span> (!mod) &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a;<br>            &#125;<br>            a = a * a;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a % mod;<br>            &#125;<br>            a = a * a % mod;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_minimum_primitive_root</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> phiM = m - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (std::__gcd(i, m) != <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">auto</span> factors = <span class="hljs-built_in">get_factors</span>(phiM);<br>        <span class="hljs-type">bool</span> ok = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> e : factors)<br>            <span class="hljs-keyword">if</span> (e != phiM &amp;&amp; <span class="hljs-built_in">qpower</span>&lt;i64&gt;(i, e, <span class="hljs-number">1</span>, m) == <span class="hljs-number">1</span>) &#123;<br>                ok = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span> (ok)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> z = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            z = <span class="hljs-number">1ll</span> * z * a % mod;<br>        a = <span class="hljs-number">1ll</span> * a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> z;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> Poly<br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>, g = <span class="hljs-number">3</span>, invg = <span class="hljs-number">332748118</span>;<br><span class="hljs-type">int</span> lim, len, rev[<span class="hljs-number">1000000</span>], invlim;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> l1, <span class="hljs-type">int</span> l2)</span></span><br><span class="hljs-function"></span>&#123;<br>    lim = <span class="hljs-number">1</span>, len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (lim &lt;= l1 + l2)<br>        lim &lt;&lt;= <span class="hljs-number">1</span>, len++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i++)<br>        rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (len - <span class="hljs-number">1</span>));<br>    invlim = <span class="hljs-built_in">ksm</span>(lim, mod - <span class="hljs-number">2</span>, mod);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; &amp;f, <span class="hljs-type">int</span> type)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i++)<br>        <span class="hljs-keyword">if</span> (i &lt; rev[i])<br>            std::<span class="hljs-built_in">swap</span>(f[i], f[rev[i]]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">2</span>; m &lt;= lim; m &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> wn = <span class="hljs-built_in">ksm</span>(type ? g : invg, (mod - <span class="hljs-number">1</span>) / m, mod);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i += m) &#123;<br>            <span class="hljs-type">int</span> w = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m / <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-type">int</span> u = f[i + j], v = <span class="hljs-number">1ll</span> * w * f[i + j + m / <span class="hljs-number">2</span>] % mod;<br>                f[i + j] = (u + v) % mod, f[i + j + m / <span class="hljs-number">2</span>] = (u - v + mod) % mod;<br>                w = <span class="hljs-number">1ll</span> * wn * w % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!type) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i++)<br>            f[i] = <span class="hljs-number">1ll</span> * f[i] * invlim % mod;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; f, std::vector&lt;<span class="hljs-type">int</span>&gt; g)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> lf = f.<span class="hljs-built_in">size</span>(), lg = g.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-built_in">init</span>(lf, lg);<br>    f.<span class="hljs-built_in">resize</span>(lim), g.<span class="hljs-built_in">resize</span>(lim);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">h</span><span class="hljs-params">(lim)</span></span>;<br>    <span class="hljs-built_in">NTT</span>(f, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">NTT</span>(g, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; lim; i++)<br>        h[i] = <span class="hljs-number">1ll</span> * f[i] * g[i] % mod;<br>    <span class="hljs-built_in">NTT</span>(h, <span class="hljs-number">0</span>);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(lf)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; lf; i++) &#123;<br>        res[i] = (h[i] + h[i + lf - <span class="hljs-number">1</span>]) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br>&#125; <span class="hljs-comment">// namespace Poly</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::string k;<br>    <span class="hljs-type">int</span> p, x;<br>    std::cin &gt;&gt; k &gt;&gt; p &gt;&gt; x;<br>    <span class="hljs-built_in">init</span>(p);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(p)</span>, <span class="hljs-title">o</span><span class="hljs-params">(p)</span></span>;<br>    <span class="hljs-type">int</span> root = <span class="hljs-built_in">get_minimum_primitive_root</span>(p);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; p; i++) &#123;<br>        <span class="hljs-type">int</span> q = <span class="hljs-built_in">qpower</span>&lt;i64&gt;(root, i, <span class="hljs-number">1</span>, p);<br>        o[q] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (c[i][j] != <span class="hljs-number">0</span>) &#123;<br>                a[o[c[i][j]]]++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(p, <span class="hljs-number">0</span>)</span></span>;<br>    ans[p - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">int</span> m = k.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (k[i] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>            ans = Poly::<span class="hljs-built_in">mul</span>(ans, a);<br>        &#125;<br>        a = Poly::<span class="hljs-built_in">mul</span>(a, a);<br>    &#125;<br>    std::cout &lt;&lt; ans[o[x]] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G-An-Easy-Math-Problem"><a href="#G-An-Easy-Math-Problem" class="headerlink" title="G - An Easy Math Problem"></a>G - An Easy Math Problem</h2><p>对于我们将 $n$ 分解质因数得到 $\prod a_i^{b_i}$ ，对于 $pq|n$ ，那么 对于任意 $p&#x2F;q$，不考虑 $p&lt;&#x3D;q$ ，则因子 $a_i$ 有 $2 * b_i + 1$ 种可能，由对称性可以知道大于 $1$ 和小于 $1$ 的个数相同。注意到等于 $1$ 的个数只有 $1$ ，所以最终答案：$ans &#x3D; (\prod (2*b_i + 1) + 1) &#x2F; 2$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    i64 n;<br>    std::cin &gt;&gt; n;<br>    i64 ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i++) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>                n /= i;<br>                res++;<br>            &#125;<br>            ans *= (<span class="hljs-number">2</span> * res + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n != <span class="hljs-number">1</span>) &#123;<br>        ans *= <span class="hljs-number">3</span>;<br>    &#125;<br>    ans = (ans + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="H-Elimination-Series-Once-More"><a href="#H-Elimination-Series-Once-More" class="headerlink" title="H - Elimination Series Once More"></a>H - Elimination Series Once More</h2><p>对于每个比赛选手想要赢下一场，则在其 $group$ 内一定是最大的。比赛一共 $n$ 场，所以每个参赛选手一定属于 $n$ 个组。</p><p>如 $1$ 号选手，属于 $[1,2]$ ，$[1,4]$ ，$[1,8]$ 。。。</p><p>题目转化为动用手段最多让其在多少组内成为最大。</p><p>我们从小到大处理选手，每个选手处理 $n$ 组，询问其在当前组是否能够成为最大值，并将这名选手加入统计中。由于从小到大处理，前面的一定对后面的选手产生贡献。</p><p>时间复杂度 $O(n2^n)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    std::cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">1</span> &lt;&lt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">o</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    std::<span class="hljs-built_in">iota</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">auto</span> cmp = [&amp;](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) -&gt; <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> a[x] &lt; a[y]; &#125;;<br>    std::<span class="hljs-built_in">sort</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>(), cmp);<br><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">cnt</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>));<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-type">int</span> c = (<span class="hljs-number">1</span> &lt;&lt; j);<br>            <span class="hljs-type">int</span> g = (o[i] + c - <span class="hljs-number">1</span>) / c;<br>            <span class="hljs-type">int</span> p = cnt[j][g];<br>            <span class="hljs-keyword">if</span> (a[o[i]] &gt;= c &amp;&amp; k + p &gt;= c - <span class="hljs-number">1</span>) &#123;<br>                ans[o[i]] = j;<br>            &#125;<br>            cnt[j][g]++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        std::cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == m];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="I-Max-GCD"><a href="#I-Max-GCD" class="headerlink" title="I - Max GCD"></a>I - Max GCD</h2><p>对于可能对答案有贡献的三元组 $(i, j, k)$ ，一定满足 $i$ 与 $j$ 相邻，且 $k$ 是离 $j$ 最近的合法的标号。</p><p>我们枚举每个数的因子可以知道每个因子只能作为 $i$ 一次，所以这样的三元组最多有 $O(nd)$ 个。</p><p>我们可以预处理出从 $1$ 到 $1E6$ 所有的因子，然后得到每个 $a_i$ 的因子，然后进一步得到每个因子存在于那些下标。对于每个因子存在的下标数组，我们每次二分得到 $k$ ，这样就可以在 $O(ndlogn)$ 时间内处理出来三元组。我们将三元组变为 $(i, k, val)$ $val为这个三元组所代表的因子$ 。</p><p>对于每个询问 $(l, r)$ ，任意的三元组 $(i,k,val)$ 满足 $l &lt;&#x3D; i, k &lt;&#x3D; r$ ，则$ans_q &#x3D; max(ans_q, val)$ ，转化为二维数点模型，注意到点数过多，我们使用分块使插入时复杂度为 $O(1)$ ，查询时复杂度为 $o(\sqrt{n})$ 。时间复杂度为$O(ndlogn + nd + q\sqrt{n})$ 。</p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Q</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Q &amp;a, Q &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a.r != b.r) &#123;<br>        <span class="hljs-keyword">return</span> a.r &lt; b.r;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-function">std::vector&lt;Q&gt; <span class="hljs-title">q</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        std::cin &gt;&gt; l &gt;&gt; r;<br>        q[i] = &#123;l, r, i&#125;;<br>    &#125;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">fac</span>(<span class="hljs-number">1E6</span> + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1E6</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= <span class="hljs-number">1E6</span>; j += i) &#123;<br>            fac[j].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">p</span>(<span class="hljs-number">1E6</span> + <span class="hljs-number">1</span>), <span class="hljs-built_in">faca</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        faca[i] = fac[a[i]];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : faca[i]) &#123;<br>            p[v].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br><br>    std::<span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>(), cmp);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(m)</span></span>;<br><br>    std::vector&lt;std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">R</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1E6</span>; i++) &#123;<br>        <span class="hljs-type">int</span> nn = p[i].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l + <span class="hljs-number">2</span> &lt; nn; l++) &#123;<br>            <span class="hljs-type">int</span> r = <span class="hljs-number">2</span> * p[i][l + <span class="hljs-number">1</span>] - p[i][l];<br>            <span class="hljs-type">int</span> idx = std::<span class="hljs-built_in">lower_bound</span>(p[i].<span class="hljs-built_in">begin</span>(), p[i].<span class="hljs-built_in">end</span>(), r) - p[i].<span class="hljs-built_in">begin</span>();<br>            <span class="hljs-keyword">if</span> (idx == nn) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            R[p[i][idx]].<span class="hljs-built_in">push_back</span>(&#123;p[i][l], i&#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">sqrt</span>(n) + <span class="hljs-number">1</span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mx</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">id</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">f</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        id[i] = i / len + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">auto</span> insert = [&amp;](<span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> v) -&gt; <span class="hljs-type">void</span> &#123;<br>        mx[pos] = std::<span class="hljs-built_in">max</span>(mx[pos], v);<br>        f[id[pos]] = std::<span class="hljs-built_in">max</span>(f[id[pos]], mx[pos]);<br>    &#125;;<br><br>    <span class="hljs-keyword">auto</span> query = [&amp;](<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) -&gt; <span class="hljs-type">int</span> &#123;<br>        <span class="hljs-type">int</span> idl = id[l], idr = id[r];<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (idl == idr) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) &#123;<br>                res = std::<span class="hljs-built_in">max</span>(res, mx[i]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; id[i] == idl; i++) &#123;<br>            res = std::<span class="hljs-built_in">max</span>(res, mx[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; id[i] == idr; i--) &#123;<br>            res = std::<span class="hljs-built_in">max</span>(res, mx[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = idl + <span class="hljs-number">1</span>; i &lt; idr; i++) &#123;<br>            res = std::<span class="hljs-built_in">max</span>(res, f[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">auto</span> [l, r, id] = q[i];<br>        <span class="hljs-keyword">while</span> (j &lt; r) &#123;<br>            j++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [ll, v] : R[j]) &#123;<br>                <span class="hljs-built_in">insert</span>(ll, v);<br>            &#125;<br>        &#125;<br>        ans[id] = <span class="hljs-built_in">query</span>(l, r);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        std::cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="N-Python-Program"><a href="#N-Python-Program" class="headerlink" title="N - Python Program"></a>N - Python Program</h2><p>模拟题。</p><p>外层循环，内层使用等差数列求和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::vector&lt;std::string&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>        std::cin &gt;&gt; s[i];<br>    &#125;<br>    i64 a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> idx = std::<span class="hljs-built_in">find</span>(s[<span class="hljs-number">4</span>].<span class="hljs-built_in">begin</span>(), s[<span class="hljs-number">4</span>].<span class="hljs-built_in">end</span>(), <span class="hljs-string">&#x27;(&#x27;</span>) - s[<span class="hljs-number">4</span>].<span class="hljs-built_in">begin</span>();<br>    idx++;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (s[<span class="hljs-number">4</span>][idx] != <span class="hljs-string">&#x27;,&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (s[<span class="hljs-number">4</span>][idx] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            flag = <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            a = a * <span class="hljs-number">10</span> + s[<span class="hljs-number">4</span>][idx] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        idx++;<br>    &#125;<br>    a *= flag;<br>    idx++;<br>    flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (s[<span class="hljs-number">4</span>][idx] != <span class="hljs-string">&#x27;,&#x27;</span> &amp;&amp; s[<span class="hljs-number">4</span>][idx] != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (s[<span class="hljs-number">4</span>][idx] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            flag = <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            b = b * <span class="hljs-number">10</span> + s[<span class="hljs-number">4</span>][idx] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        idx++;<br>    &#125;<br>    b *= flag;<br>    <span class="hljs-keyword">if</span> (s[<span class="hljs-number">4</span>][idx] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>        c = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        idx++;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (s[<span class="hljs-number">4</span>][idx] != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">4</span>][idx] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                flag = <span class="hljs-number">-1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                c = c * <span class="hljs-number">10</span> + s[<span class="hljs-number">4</span>][idx] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            idx++;<br>        &#125;<br>        c *= flag;<br>    &#125;<br>    i64 ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span> &amp;&amp; a &gt;= b || c &lt; <span class="hljs-number">0</span> &amp;&amp; a &lt;= b) &#123;<br>        std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a; i &lt; b; i += c) &#123;<br>            <span class="hljs-type">int</span> idx = std::<span class="hljs-built_in">find</span>(s[<span class="hljs-number">8</span>].<span class="hljs-built_in">begin</span>(), s[<span class="hljs-number">8</span>].<span class="hljs-built_in">end</span>(), <span class="hljs-string">&#x27;(&#x27;</span>) - s[<span class="hljs-number">8</span>].<span class="hljs-built_in">begin</span>();<br>            idx++;<br>            i64 d = <span class="hljs-number">0</span>, e = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>            std::string ds = <span class="hljs-string">&quot;&quot;</span>, es = <span class="hljs-string">&quot;&quot;</span>, fs = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> (s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;,&#x27;</span>) &#123;<br>                ds += s[<span class="hljs-number">8</span>][idx];<br>                idx++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ds == s[<span class="hljs-number">2</span>]) &#123;<br>                d = i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : ds) &#123;<br>                    <span class="hljs-keyword">if</span> (p == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                        flag = <span class="hljs-number">-1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        d = d * <span class="hljs-number">10</span> + p - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    &#125;<br>                &#125;<br>                d *= flag;<br>            &#125;<br>            idx++;<br>            <span class="hljs-keyword">while</span> (s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;,&#x27;</span> &amp;&amp; s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                es += s[<span class="hljs-number">8</span>][idx];<br>                idx++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (es == s[<span class="hljs-number">2</span>]) &#123;<br>                e = i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : es) &#123;<br>                    <span class="hljs-keyword">if</span> (p == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                        flag = <span class="hljs-number">-1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        e = e * <span class="hljs-number">10</span> + p - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    &#125;<br>                &#125;<br>                e *= flag;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">8</span>][idx] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                f = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                idx++;<br>                <span class="hljs-keyword">while</span> (s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                    fs += s[<span class="hljs-number">8</span>][idx];<br>                    idx++;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (fs == s[<span class="hljs-number">2</span>]) &#123;<br>                    f = i;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : fs) &#123;<br>                        <span class="hljs-keyword">if</span> (p == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                            flag = <span class="hljs-number">-1</span>;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            f = f * <span class="hljs-number">10</span> + p - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                        &#125;<br>                    &#125;<br>                    f *= flag;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (f &gt; <span class="hljs-number">0</span> &amp;&amp; d &gt;= e || f &lt; <span class="hljs-number">0</span> &amp;&amp; d &lt;= e) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> cnt = (<span class="hljs-built_in">abs</span>(e - d) + <span class="hljs-built_in">abs</span>(f) - <span class="hljs-number">1</span>) / <span class="hljs-built_in">abs</span>(f);<br>            ans += (d + d + (cnt - <span class="hljs-number">1</span>) * f) * cnt / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a; i &gt; b; i += c) &#123;<br>            <span class="hljs-type">int</span> idx = std::<span class="hljs-built_in">find</span>(s[<span class="hljs-number">8</span>].<span class="hljs-built_in">begin</span>(), s[<span class="hljs-number">8</span>].<span class="hljs-built_in">end</span>(), <span class="hljs-string">&#x27;(&#x27;</span>) - s[<span class="hljs-number">8</span>].<span class="hljs-built_in">begin</span>();<br>            idx++;<br>            i64 d = <span class="hljs-number">0</span>, e = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>            std::string ds = <span class="hljs-string">&quot;&quot;</span>, es = <span class="hljs-string">&quot;&quot;</span>, fs = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> (s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;,&#x27;</span>) &#123;<br>                ds += s[<span class="hljs-number">8</span>][idx];<br>                idx++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ds == s[<span class="hljs-number">2</span>]) &#123;<br>                d = i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : ds) &#123;<br>                    <span class="hljs-keyword">if</span> (p == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                        flag = <span class="hljs-number">-1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        d = d * <span class="hljs-number">10</span> + p - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    &#125;<br>                &#125;<br>                d *= flag;<br>            &#125;<br>            idx++;<br>            <span class="hljs-keyword">while</span> (s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;,&#x27;</span> &amp;&amp; s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                es += s[<span class="hljs-number">8</span>][idx];<br>                idx++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (es == s[<span class="hljs-number">2</span>]) &#123;<br>                e = i;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : es) &#123;<br>                    <span class="hljs-keyword">if</span> (p == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                        flag = <span class="hljs-number">-1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        e = e * <span class="hljs-number">10</span> + p - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    &#125;<br>                &#125;<br>                e *= flag;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">8</span>][idx] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                f = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                idx++;<br>                <span class="hljs-keyword">while</span> (s[<span class="hljs-number">8</span>][idx] != <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                    fs += s[<span class="hljs-number">8</span>][idx];<br>                    idx++;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (fs == s[<span class="hljs-number">2</span>]) &#123;<br>                    f = i;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : fs) &#123;<br>                        <span class="hljs-keyword">if</span> (p == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                            flag = <span class="hljs-number">-1</span>;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            f = f * <span class="hljs-number">10</span> + p - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                        &#125;<br>                    &#125;<br>                    f *= flag;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (f &gt; <span class="hljs-number">0</span> &amp;&amp; d &gt;= e || f &lt; <span class="hljs-number">0</span> &amp;&amp; d &lt;= e) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> cnt = (<span class="hljs-built_in">abs</span>(e - d) + <span class="hljs-built_in">abs</span>(f) - <span class="hljs-number">1</span>) / <span class="hljs-built_in">abs</span>(f);<br>            ans += (i64)(d + d + (cnt - <span class="hljs-number">1</span>) * f) * cnt / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>XCPC</category>
      
      <category>2023-2024</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>zFunction</title>
    <link href="/2024/09/07/zFunction/"/>
    <url>/2024/09/07/zFunction/</url>
    
    <content type="html"><![CDATA[<h1 id="zFunction"><a href="#zFunction" class="headerlink" title="zFunction"></a>zFunction</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">zFunction</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">z</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    z[<span class="hljs-number">0</span>] = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        z[i] = std::<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, std::<span class="hljs-built_in">min</span>(j + z[j] - i, z[i - j]));<br>        <span class="hljs-keyword">while</span> (i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) &#123;<br>            z[i]++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i + z[i] &gt; j + z[j]) &#123;<br>            j = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> z;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>String</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SeqAM</title>
    <link href="/2024/09/03/SeqAM/"/>
    <url>/2024/09/03/SeqAM/</url>
    
    <content type="html"><![CDATA[<h1 id="SeqAM"><a href="#SeqAM" class="headerlink" title="SeqAM"></a>SeqAM</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;std::array&lt;<span class="hljs-type">int</span>, 26&gt;&gt; <span class="hljs-built_in">SeqAM</span>(std::string &amp;s)<br>&#123;<br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>    std::vector&lt;std::array&lt;<span class="hljs-type">int</span>, 26&gt;&gt; <span class="hljs-built_in">ne</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">array</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-number">26</span>&gt;());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>        ne[n][i] = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++)<br>            ne[i - <span class="hljs-number">1</span>][j] = ne[i][j];<br>        ne[i - <span class="hljs-number">1</span>][s[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ne;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>String</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Matrix</title>
    <link href="/2024/08/21/Matrix/"/>
    <url>/2024/08/21/Matrix/</url>
    
    <content type="html"><![CDATA[<h1 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    <span class="hljs-type">int</span> n, mod;<br>    std::vector&lt;std::vector&lt;T&gt;&gt; a;<br><br>    <span class="hljs-built_in">Matrix</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> mod = <span class="hljs-number">0</span>) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">mod</span>(mod), <span class="hljs-built_in">a</span>(n, std::<span class="hljs-built_in">vector</span>&lt;T&gt;(n))<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                a[i][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            a[i][i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    Matrix <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Matrix &amp;t) <span class="hljs-type">const</span><br>    &#123;<br>        Matrix&lt;T&gt; ret = <span class="hljs-built_in">Matrix</span>(n, mod);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            ret.a[i][i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (mod) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>                        ret.a[i][j] = (ret.a[i][j] + a[i][k] * t.a[k][j]) % mod;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>                        ret.a[i][j] = (ret.a[i][j] + a[i][k] * t.a[k][j]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    Matrix <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Matrix &amp;t) <span class="hljs-type">const</span><br>    &#123;<br>        Matrix&lt;T&gt; ret = <span class="hljs-built_in">Matrix</span>(n, mod);<br>        <span class="hljs-keyword">if</span> (mod) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                    ret.a[i][j] = (a[i][j] + t.a[i][j]) % mod;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                    ret.a[i][j] = (a[i][j] + t.a[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    Matrix <span class="hljs-keyword">operator</span>%(<span class="hljs-type">const</span> Matrix &amp;t) <span class="hljs-type">const</span><br>    &#123;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Number Theory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>qpower</title>
    <link href="/2024/08/19/qpower/"/>
    <url>/2024/08/19/qpower/</url>
    
    <content type="html"><![CDATA[<h1 id="qpower"><a href="#qpower" class="headerlink" title="qpower"></a>qpower</h1><ul><li>传入 <strong><em>int</em></strong> 类型会爆 <strong><em>int</em></strong> 。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">qpower</span><span class="hljs-params">(T a, i64 b, T init = T(), <span class="hljs-type">int</span> mod = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    T res = init;<br>    <span class="hljs-keyword">if</span> (!mod) &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a;<br>            &#125;<br>            a = a * a;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>                res = res * a % mod;<br>            &#125;<br>            a = a * a % mod;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Number Theory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HLD</title>
    <link href="/2024/08/17/HLD/"/>
    <url>/2024/08/17/HLD/</url>
    
    <content type="html"><![CDATA[<h1 id="HLD（树链剖分）"><a href="#HLD（树链剖分）" class="headerlink" title="HLD（树链剖分）"></a>HLD（树链剖分）</h1><ul><li>两种 <strong><em>Edge</em></strong> 类型</li><li>两种修改和查询结合线段树模板使用</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 1_based HLD</span><br><span class="hljs-comment">// struct Edge&#123;</span><br><span class="hljs-comment">//     int to;</span><br><span class="hljs-comment">//     int w;</span><br><span class="hljs-comment">//     operator int() const &#123; return to; &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-keyword">using</span> Edge = <span class="hljs-type">int</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HLD</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sz, top, dep, fa, in, out, seq;<br>    std::vector&lt;std::vector&lt;Edge&gt;&gt; g;<br>    <span class="hljs-type">int</span> ts;<br><br>    <span class="hljs-built_in">HLD</span>(<span class="hljs-type">const</span> std::vector&lt;std::vector&lt;Edge&gt;&gt; &amp;g, <span class="hljs-type">int</span> root = <span class="hljs-number">1</span>) : <span class="hljs-built_in">n</span>(<span class="hljs-built_in">int</span>(g.<span class="hljs-built_in">size</span>()) - <span class="hljs-number">1</span>), <span class="hljs-built_in">g</span>(g)<br>    &#123;<br>        ts = <span class="hljs-number">0</span>;<br>        sz.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        top.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        dep.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        fa.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        in.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        out.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        seq.<span class="hljs-built_in">resize</span>(n + <span class="hljs-number">1</span>);<br>        dep[root] = <span class="hljs-number">1</span>;<br>        top[root] = root;<br>        <span class="hljs-built_in">dfs_sz</span>(root);<br>        <span class="hljs-built_in">dfs_hld</span>(root);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs_sz</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (fa[u]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = g[u].<span class="hljs-built_in">begin</span>(); it != g[u].<span class="hljs-built_in">end</span>(); it++) &#123;<br>                <span class="hljs-keyword">if</span> (*it == fa[u]) &#123;<br>                    g[u].<span class="hljs-built_in">erase</span>(it);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        sz[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;j : g[u]) &#123;<br>            fa[j] = u;<br>            dep[j] = dep[u] + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs_sz</span>(j);<br>            sz[u] += sz[j];<br>            <span class="hljs-keyword">if</span> (sz[j] &gt; sz[g[u][<span class="hljs-number">0</span>]]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(j, g[u][<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs_hld</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function">    </span>&#123;<br>        in[u] = ++ts;<br>        seq[in[u]] = u;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : g[u]) &#123;<br>            top[j] = (j == g[u][<span class="hljs-number">0</span>] ? top[u] : j);<br>            <span class="hljs-built_in">dfs_hld</span>(j);<br>        &#125;<br>        out[u] = ts;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>            <span class="hljs-keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;<br>                u = fa[top[u]];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                v = fa[top[v]];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dep[u] &lt; dep[v] ? u : v;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> dep[u] + dep[v] - <span class="hljs-number">2</span> * dep[<span class="hljs-built_in">lca</span>(u, v)];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">in_subtree</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> in[v] &lt;= in[u] &amp;&amp; in[u] &lt;= out[v];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (dep[u] &lt; k) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> d = dep[u] - k;<br>        <span class="hljs-keyword">while</span> (dep[top[u]] &gt; d) &#123;<br>            u = fa[top[u]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> seq[in[u] - dep[u] + d];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rooted_lca</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">lca</span>(a, b) ^ <span class="hljs-built_in">lca</span>(b, c) ^ <span class="hljs-built_in">lca</span>(c, a);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Q&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_path</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">const</span> Q &amp;q, <span class="hljs-type">bool</span> edge = <span class="hljs-literal">false</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>            <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(u, v);<br>            &#125;<br>            <span class="hljs-built_in">q</span>(in[top[u]], in[u]);<br>            u = fa[top[u]];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) &#123;<br>            std::<span class="hljs-built_in">swap</span>(u, v);<br>        &#125;<br>        <span class="hljs-built_in">q</span>(in[u] + edge, in[v]);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Q&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_subtree</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">const</span> Q &amp;q)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">q</span>(in[u], out[u]);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Q&gt; <span class="hljs-function">T <span class="hljs-title">query_path</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">const</span> Q &amp;q, <span class="hljs-type">bool</span> edge = <span class="hljs-literal">false</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T ret = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>            <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(u, v);<br>            &#125;<br>            ret = <span class="hljs-built_in">q</span>(in[top[u]], in[u]) + ret;<br>            u = fa[top[u]];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) &#123;<br>            std::<span class="hljs-built_in">swap</span>(u, v);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">q</span>(in[u] + edge, in[v]) + ret;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Q&gt; <span class="hljs-function">T <span class="hljs-title">query_subtree</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">const</span> Q &amp;q)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">q</span>(in[u], out[u]);<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> Q, <span class="hljs-keyword">typename</span> F&gt; <span class="hljs-function">T <span class="hljs-title">query_path_noncommutative</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">const</span> Q &amp;q, <span class="hljs-type">const</span> F &amp;f, <span class="hljs-type">bool</span> edge = <span class="hljs-literal">false</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T left = <span class="hljs-built_in">T</span>(), right = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">while</span> (top[u] != top[v]) &#123;<br>            <span class="hljs-keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(u, v), std::<span class="hljs-built_in">swap</span>(left, right);<br>            &#125;<br>            left = <span class="hljs-built_in">q</span>(in[top[u]], in[u]) + left;<br>            u = fa[top[u]];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dep[u] &gt; dep[v]) &#123;<br>            std::<span class="hljs-built_in">swap</span>(u, v), std::<span class="hljs-built_in">swap</span>(left, right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(left, <span class="hljs-built_in">q</span>(in[u] + edge, in[v]) + right);<br>    &#125;<br><br>    std::pair&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;, std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">compress</span>(std::vector&lt;<span class="hljs-type">int</span>&gt; v)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> cmp = [&amp;](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> in[a] &lt; in[b]; &#125;;<br>        <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), cmp);<br>        v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()), v.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> k = (<span class="hljs-type">int</span>)v.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i + <span class="hljs-number">1</span> &lt; k; i++) &#123;<br>            v.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">lca</span>(v[i], v[i + <span class="hljs-number">1</span>]));<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), cmp);<br>        v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()), v.<span class="hljs-built_in">end</span>());<br>        std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; edges;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; stk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : v) &#123;<br>            <span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>() &amp;&amp; out[stk.<span class="hljs-built_in">back</span>()] &lt; in[x]) &#123;<br>                stk.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!stk.<span class="hljs-built_in">empty</span>()) &#123;<br>                edges.<span class="hljs-built_in">push_back</span>(&#123;stk.<span class="hljs-built_in">back</span>(), x&#125;);<br>            &#125;<br>            stk.<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;v, edges&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Data Structure</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SparseTable</title>
    <link href="/2024/08/13/SparseTable/"/>
    <url>/2024/08/13/SparseTable/</url>
    
    <content type="html"><![CDATA[<h1 id="Sparse-Table"><a href="#Sparse-Table" class="headerlink" title="Sparse Table"></a>Sparse Table</h1><ul><li>区间最值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-type">bool</span> isMin&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SparseTable</span> &#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::vector&lt;std::vector&lt;T&gt;&gt; f;<br><br>    <span class="hljs-built_in">SparseTable</span>()<br>    &#123;<br>    &#125;<br>    <span class="hljs-built_in">SparseTable</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">m</span>(std::__lg(n)), <span class="hljs-built_in">f</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;T&gt;(n + <span class="hljs-number">1</span>))<br>    &#123;<br>    &#125;<br>    <span class="hljs-built_in">SparseTable</span>(<span class="hljs-type">const</span> std::vector&lt;T&gt; &amp;init) : <span class="hljs-built_in">SparseTable</span>((<span class="hljs-type">int</span>)init.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            f[<span class="hljs-number">0</span>][i] = init[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= n; i++) &#123;<br>                <span class="hljs-keyword">if</span> (isMin) &#123;<br>                    f[j][i] = std::<span class="hljs-built_in">min</span>(f[j - <span class="hljs-number">1</span>][i], f[j - <span class="hljs-number">1</span>][i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    f[j][i] = std::<span class="hljs-built_in">max</span>(f[j - <span class="hljs-number">1</span>][i], f[j - <span class="hljs-number">1</span>][i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; r) &#123;<br>            <span class="hljs-keyword">if</span> (isMin) &#123;<br>                <span class="hljs-keyword">return</span> std::numeric_limits&lt;T&gt;::<span class="hljs-built_in">max</span>() / <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> std::numeric_limits&lt;T&gt;::<span class="hljs-built_in">min</span>() / <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> len = std::__lg(r - l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (isMin)<br>            <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">min</span>(f[len][l], f[len][r - (<span class="hljs-number">1</span> &lt;&lt; len) + <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(f[len][l], f[len][r - (<span class="hljs-number">1</span> &lt;&lt; len) + <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>自传函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SparseTable</span> &#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::vector&lt;std::vector&lt;T&gt;&gt; f;<br><br>    <span class="hljs-built_in">SparseTable</span>()<br>    &#123;<br>    &#125;<br>    <span class="hljs-built_in">SparseTable</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">m</span>(std::__lg(n)), <span class="hljs-built_in">f</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;T&gt;(n + <span class="hljs-number">1</span>))<br>    &#123;<br>    &#125;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Q&gt; <span class="hljs-built_in">SparseTable</span>(<span class="hljs-type">const</span> std::vector&lt;T&gt; &amp;init, <span class="hljs-type">const</span> Q &amp;q) : <span class="hljs-built_in">SparseTable</span>((<span class="hljs-type">int</span>)init.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            f[<span class="hljs-number">0</span>][i] = init[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= n; i++) &#123;<br>                f[j][i] = <span class="hljs-built_in">q</span>(f[j - <span class="hljs-number">1</span>][i], f[j - <span class="hljs-number">1</span>][i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Q&gt; <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> Q &amp;q)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len = std::__lg(r - l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">q</span>(f[len][l], f[len][r - (<span class="hljs-number">1</span> &lt;&lt; len) + <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Data Structure</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典8 区间内每个数出现次数为k次或k的倍数次（扫描线/哈希）</title>
    <link href="/2024/08/09/%E7%BB%8F%E5%85%B88-%E5%8C%BA%E9%97%B4%E5%86%85%E6%AF%8F%E4%B8%AA%E6%95%B0%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E4%B8%BAk%E6%AC%A1%E6%88%96k%E7%9A%84%E5%80%8D%E6%95%B0%E6%AC%A1%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF-%E5%93%88%E5%B8%8C%EF%BC%89/"/>
    <url>/2024/08/09/%E7%BB%8F%E5%85%B88-%E5%8C%BA%E9%97%B4%E5%86%85%E6%AF%8F%E4%B8%AA%E6%95%B0%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E4%B8%BAk%E6%AC%A1%E6%88%96k%E7%9A%84%E5%80%8D%E6%95%B0%E6%AC%A1%EF%BC%88%E6%89%AB%E6%8F%8F%E7%BA%BF-%E5%93%88%E5%B8%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="区间内每个数出现次数为k次或k的倍数次（扫描线-哈希）"><a href="#区间内每个数出现次数为k次或k的倍数次（扫描线-哈希）" class="headerlink" title="区间内每个数出现次数为k次或k的倍数次（扫描线&#x2F;哈希）"></a>区间内每个数出现次数为k次或k的倍数次（扫描线&#x2F;哈希）</h1><p>给定一个数组 <strong><em>a</em></strong> ，询问有多少子数组中每个数出现恰好 <strong><em>k</em></strong> 次。</p><p>做法一：扫描线。</p><p>从后向前，对于第 <strong><em>i</em></strong> 个出现的数 $a_i$ ，找到这个数向后第 <strong><em>k</em></strong> 次出现的位置，记为 <strong><em>l</em></strong> ，第 <strong><em>k + 1</em></strong> 次出现的位置，记为 <strong><em>r</em></strong> ，那么在区间 $[i,l-1]$ 和 $[r,n]$ 这个数出现次数都不是 <strong><em>k</em></strong> 次。将所有这样不合法的区间取出并集，剩余的位置就是合法的。维护并集使用扫描线。</p><p>做法二：哈希。</p><p>对于同一个数，前 <strong><em>k - 1</em></strong> 次出现使用随机数赋值，并在第 <strong><em>k</em></strong> 次出现赋值为 <strong><em>0</em></strong> ，表示其前缀值  。那么对于区间存在个 <strong><em>k</em></strong> 个相同的值区间和一定为 **<em>0</em>**。这适用于出现 <strong><em>k</em></strong> 的倍数次，如果只能出现 <strong><em>k</em></strong> 次，可以使用滑动窗口维护使得一个区间任何数出现次数不大于 <strong><em>k</em></strong> 次。</p><p>例题：<a href="https://codeforces.com/problemset/problem/1418/G">https://codeforces.com/problemset/problem/1418/G</a></p><p>扫描线：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tag</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LazySegmentTree</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;Info&gt; info;<br>    std::vector&lt;Tag&gt; tag;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>()<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>(<span class="hljs-type">int</span> n, Info _init = <span class="hljs-built_in">Info</span>())<br>    &#123;<br>        <span class="hljs-built_in">init</span>(std::<span class="hljs-built_in">vector</span>&lt;Info&gt;(n, _init));<br>    &#125;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)<br>    &#123;<br>        <span class="hljs-built_in">init</span>(_init);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)</span></span><br><span class="hljs-function">    </span>&#123;<br>        n = (<span class="hljs-type">int</span>)_init.<span class="hljs-built_in">size</span>();<br>        info.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Info</span>());<br>        tag.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Tag</span>());<br>        std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; build = [&amp;](<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                info[p] = _init[l - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p, l, m);<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">pull</span>(p);<br>        &#125;;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (tag[p].sum == <span class="hljs-number">0</span>) &#123;<br>            info[p] = info[<span class="hljs-number">2</span> * p] + info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">const</span> Tag &amp;v, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tag[p].sum += v.sum;<br>        <span class="hljs-keyword">if</span> (tag[p].sum != <span class="hljs-number">0</span>) &#123;<br>            info[p].sum = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                info[p].sum = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                info[p].sum = info[<span class="hljs-number">2</span> * p].sum + info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>].sum;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// apply(2 * p, tag[p]);</span><br>        <span class="hljs-comment">// apply(2 * p + 1, tag[p]);</span><br>        <span class="hljs-comment">// tag[p] = Tag();</span><br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-keyword">return</span> info[p];<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-keyword">if</span> (tag[p].sum &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p, l, m, x, y) + <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-built_in">apply</span>(p, v, l, r);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p, l, m, x, y, v);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y, v);<br>        <span class="hljs-built_in">pull</span>(p);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, v);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tag</span> &#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>&#125;;<br><br>Info <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Info &amp;a, <span class="hljs-type">const</span> Info &amp;b)<br>&#123;<br>    Info res;<br>    res.sum = a.sum + b.sum;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> k = <span class="hljs-number">3</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; o;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        o.<span class="hljs-built_in">push_back</span>(a[i]);<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>());<br>    o.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">unique</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>()), o.<span class="hljs-built_in">end</span>());<br>    std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-type">int</span> m = o.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        mp[o[i]] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        a[i] = mp[a[i]];<br>    &#125;<br><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">id</span>(m + <span class="hljs-number">1</span>);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sf</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (id[a[i]].<span class="hljs-built_in">size</span>()) &#123;<br>            sf[id[a[i]].<span class="hljs-built_in">back</span>()] = i;<br>        &#125;<br>        id[a[i]].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br><br>    std::vector&lt;std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">Seg</span>(n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> nn = id[i].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; nn; j++) &#123;<br>            <span class="hljs-keyword">if</span> (j + k - <span class="hljs-number">1</span> &lt; nn) &#123;<br>                <span class="hljs-type">int</span> l = id[i][j + k - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (l &gt; id[i][j]) &#123;<br>                    Seg[id[i][j]].<span class="hljs-built_in">push_back</span>(&#123;id[i][j], l - <span class="hljs-number">1</span>&#125;);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Seg[id[i][j]].<span class="hljs-built_in">push_back</span>(&#123;id[i][j], n&#125;);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j + k &lt; nn) &#123;<br>                <span class="hljs-type">int</span> r = id[i][j + k];<br>                Seg[id[i][j]].<span class="hljs-built_in">push_back</span>(&#123;r, n&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    i64 ans = <span class="hljs-number">0</span>;<br>    std::vector&lt;Info&gt; _init(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        _init[i].sum = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function">LazySegmentTree&lt;Info, Tag&gt; <span class="hljs-title">seg</span><span class="hljs-params">(_init)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (sf[i]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, y] : Seg[sf[i]]) &#123;<br>                Tag tag;<br>                tag.sum = <span class="hljs-number">-1</span>;<br>                seg.<span class="hljs-built_in">modify</span>(x, y, tag);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, y] : Seg[i]) &#123;<br>            Tag tag;<br>            tag.sum = <span class="hljs-number">1</span>;<br>            seg.<span class="hljs-built_in">modify</span>(x, y, tag);<br>        &#125;<br>        ans += seg.<span class="hljs-built_in">query</span>(i, n).sum;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>哈希：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ui64 = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5E5</span> + <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::mt19937_64 <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-number">1431245215</span>)</span></span>;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br><br>    std::map&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, ui64&gt; mp;<br><br>    <span class="hljs-keyword">auto</span> get = [&amp;](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> cnt) -&gt; ui64 &#123;<br>        cnt %= <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> (ui64)<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!mp.<span class="hljs-built_in">count</span>(&#123;x, cnt&#125;)) &#123;<br>            mp[&#123;x, cnt&#125;] = <span class="hljs-built_in">rnd</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> mp[&#123;x, cnt&#125;];<br>    &#125;;<br><br>    <span class="hljs-function">std::vector&lt;ui64&gt; <span class="hljs-title">s</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(N)</span>, <span class="hljs-title">tot</span><span class="hljs-params">(N)</span></span>;<br>    std::map&lt;ui64, <span class="hljs-type">int</span>&gt; h;<br>    h[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    ui64 hsh = <span class="hljs-number">0</span>;<br>    i64 ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        hsh -= <span class="hljs-built_in">get</span>(a[i], cnt[a[i]]);<br>        cnt[a[i]]++;<br>        tot[a[i]]++;<br>        hsh += <span class="hljs-built_in">get</span>(a[i], cnt[a[i]]);<br>        <span class="hljs-keyword">while</span> (j + <span class="hljs-number">1</span> &lt;= n &amp;&amp; tot[a[i]] &gt; <span class="hljs-number">3</span>) &#123;<br>            h[s[j]] -= <span class="hljs-number">1</span>;<br>            j++;<br>            tot[a[j]] -= <span class="hljs-number">1</span>;<br>        &#125;<br>        ans += h[hsh];<br>        h[hsh] += <span class="hljs-number">1</span>;<br>        s[i] = hsh;<br>    &#125;<br><br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典7 最小化路径最大值</title>
    <link href="/2024/08/08/%E7%BB%8F%E5%85%B87-%E6%9C%80%E5%B0%8F%E5%8C%96%E8%B7%AF%E5%BE%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <url>/2024/08/08/%E7%BB%8F%E5%85%B87-%E6%9C%80%E5%B0%8F%E5%8C%96%E8%B7%AF%E5%BE%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="最小化路径最大值"><a href="#最小化路径最大值" class="headerlink" title="最小化路径最大值"></a>最小化路径最大值</h1><p>给定一个无向图，约定一条路径的距离为这条路径上的边的最大值，求两点之间的最小距离。即最小化路径最大值。</p><p>将边排序，从小到大依次将可以加入集合中的边加入即可。</p><p>例题：<a href="https://codeforces.com/problemset/problem/1081/D">https://codeforces.com/problemset/problem/1081/D</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; p, siz;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">p</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">siz</span>(n + <span class="hljs-number">1</span>)<br>    &#123;<br>        std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        siz[x] += siz[y];<br>        p[y] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, k;<br>    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(k)</span></span>;<br>    <span class="hljs-function">DSU <span class="hljs-title">dsu</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        dsu.siz[a[i]] = <span class="hljs-number">1</span>;<br>    &#125;<br>    std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; edge;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        std::cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        edge.<span class="hljs-built_in">push_back</span>(&#123;w, &#123;u, v&#125;&#125;);<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(edge.<span class="hljs-built_in">begin</span>(), edge.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> w = edge[i].first, u = edge[i].second.first, v = edge[i].second.second;<br>        <span class="hljs-type">int</span> pu = dsu.<span class="hljs-built_in">find</span>(u), pv = dsu.<span class="hljs-built_in">find</span>(v);<br>        <span class="hljs-keyword">if</span> (pu == pv) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dsu.<span class="hljs-built_in">size</span>(pu) == <span class="hljs-number">0</span> || dsu.<span class="hljs-built_in">size</span>(pv) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (dsu.<span class="hljs-built_in">size</span>(pu) == <span class="hljs-number">0</span>) &#123;<br>                dsu.<span class="hljs-built_in">merge</span>(pv, pu);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dsu.<span class="hljs-built_in">merge</span>(pu, pv);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            mx = w;<br>            dsu.<span class="hljs-built_in">merge</span>(pu, pv);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;<br>        std::cout &lt;&lt; mx &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == k];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典6 二维数点</title>
    <link href="/2024/08/08/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%82%B9/"/>
    <url>/2024/08/08/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="经典6-二维数点"><a href="#经典6-二维数点" class="headerlink" title="经典6 二维数点"></a>经典6 二维数点</h1><p>给定二维平面上的点，多次询问二维矩形区域内点的数量。这个问题被称为二维数点问题。</p><p>这个问题可以使用离线加树状数组解决。</p><p>对于询问 $(x_1, y_1, x_2, y_2)$ ，我们将其拆分成两个询问 $(1, y_1, x_1 - 1, y_2)$ 和 $(1, y_1, x_2, y_2)$ 这样我们用后者的结果减去前者的结果就可以得到该次询问的答案。对于 <strong><em>y</em></strong> 这一维，我们使用树状数组维护，对于 <strong><em>x</em></strong> 这一维，我们从小到大的遍历询问，并且每次讲小于等于该询问 <strong><em>x</em></strong> 的点加入树状数组中，就可以完成拆分后的询问。时间复杂度 $O((n + q)log(n + q))$ 。</p><p>对于数据范围较大的要使用离散化。 </p><p>例题：<a href="https://www.luogu.com.cn/problem/P2163">洛谷P2163 园丁的烦劳</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fenwick</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;T&gt; tr;<br><br>    <span class="hljs-built_in">Fenwick</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">tr</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>            tr[i] += c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(l, c);<br>        <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> &lt;= n)<br>            <span class="hljs-built_in">modify</span>(r + <span class="hljs-number">1</span>, -c);<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T res = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            res += tr[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r) - <span class="hljs-built_in">query</span>(l - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt; sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt;= sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">o</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)</span></span>;<br>    std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">point</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::cin &gt;&gt; point[i].first &gt;&gt; point[i].second;<br>        o.<span class="hljs-built_in">push_back</span>(point[i].second);<br>    &#125;<br><br>    std::vector&lt;std::tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> x1, y1, x2, y2;<br>        std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-keyword">if</span> (x1 - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>) &#123;<br>            q.<span class="hljs-built_in">push_back</span>(&#123;x1 - <span class="hljs-number">1</span>, y1, y2, <span class="hljs-number">-1</span>, i&#125;);<br>        &#125;<br>        q.<span class="hljs-built_in">push_back</span>(&#123;x2, y1, y2, <span class="hljs-number">1</span>, i&#125;);<br>        o.<span class="hljs-built_in">push_back</span>(y1);<br>        o.<span class="hljs-built_in">push_back</span>(y2);<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>());<br>    o.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">unique</span>(o.<span class="hljs-built_in">begin</span>(), o.<span class="hljs-built_in">end</span>()), o.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> nn = o.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vo</span><span class="hljs-params">(o.back() + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= nn; i++) &#123;<br>        vo[o[i]] = i;<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(point.<span class="hljs-built_in">begin</span>(), point.<span class="hljs-built_in">end</span>());<br>    std::<span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> mm = q.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">Fenwick&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fen</span><span class="hljs-params">(nn)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; mm; i++) &#123;<br>        <span class="hljs-keyword">auto</span> [x, y1, y2, mul, id] = q[i];<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; point[j].first &lt;= x) &#123;<br>            fen.<span class="hljs-built_in">modify</span>(vo[point[j].second], <span class="hljs-number">1</span>);<br>            j++;<br>        &#125;<br>        <span class="hljs-type">int</span> res = fen.<span class="hljs-built_in">query</span>(vo[y1], vo[y2]);<br>        ans[id] += res * mul;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        std::cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SegmentTree2（区间修改区间查询）</title>
    <link href="/2024/08/03/SegmentTree2%EF%BC%88%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%EF%BC%89/"/>
    <url>/2024/08/03/SegmentTree2%EF%BC%88%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="SegmentTree2（区间修改区间查询，包含懒标记）"><a href="#SegmentTree2（区间修改区间查询，包含懒标记）" class="headerlink" title="SegmentTree2（区间修改区间查询，包含懒标记）"></a>SegmentTree2（区间修改区间查询，包含懒标记）</h1><p>定义结构体 <strong><em>Info</em></strong> 并重载其加号同时完成成员函数 <strong><em>apply</em></strong> 。</p><p>定义结构体 <strong><em>Tag</em></strong> 并完成成员函数 <strong><em>apply</em></strong> 。</p><p>使用函数 <strong><em>find_first</em></strong> 和函数 <strong><em>find_last</em></strong> 进行线段树二分要定义函数 <strong><em>f</em></strong> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tag</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LazySegmentTree</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;Info&gt; info;<br>    std::vector&lt;Tag&gt; tag;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>()<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>(<span class="hljs-type">int</span> n, Info _init = <span class="hljs-built_in">Info</span>())<br>    &#123;<br>        <span class="hljs-built_in">init</span>(std::<span class="hljs-built_in">vector</span>&lt;Info&gt;(n, _init));<br>    &#125;<br><br>    <span class="hljs-built_in">LazySegmentTree</span>(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)<br>    &#123;<br>        <span class="hljs-built_in">init</span>(_init);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)</span></span><br><span class="hljs-function">    </span>&#123;<br>        n = (<span class="hljs-type">int</span>)_init.<span class="hljs-built_in">size</span>();<br>        info.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Info</span>());<br>        tag.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Tag</span>());<br>        std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; build = [&amp;](<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                info[p] = _init[l - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p, l, m);<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">pull</span>(p);<br>        &#125;;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        info[p] = info[<span class="hljs-number">2</span> * p] + info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        info[p].<span class="hljs-built_in">apply</span>(v);<br>        tag[p].<span class="hljs-built_in">apply</span>(v);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">apply</span>(<span class="hljs-number">2</span> * p, tag[p]);<br>        <span class="hljs-built_in">apply</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, tag[p]);<br>        tag[p] = <span class="hljs-built_in">Tag</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">const</span> Info &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            info[p] = v;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-keyword">if</span> (x &lt;= m) &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p, l, m, x, v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, v);<br>        &#125;<br>        <span class="hljs-built_in">pull</span>(p);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">const</span> Info &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, p, v);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-keyword">return</span> info[p];<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p, l, m, x, y) + <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-built_in">apply</span>(p, v);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p, l, m, x, y, v);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y, v);<br>        <span class="hljs-built_in">pull</span>(p);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> Tag &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, v);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f, Info &amp;pre)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; R || r &lt; L) &#123;<br>            <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">f</span>(pre + info[p])) &#123;<br>                pre = pre + info[p];<br>                <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l == r)<br>                <span class="hljs-keyword">return</span> r;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">push</span>(p);<br>            <span class="hljs-type">int</span> res;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(pre + info[<span class="hljs-number">2</span> * p])) &#123;<br>                res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, pre);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                pre = pre + info[<span class="hljs-number">2</span> * p];<br>                res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, pre);<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-type">int</span> res = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (L &lt;= m) &#123;<br>            res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, pre);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (R &gt; m &amp;&amp; res == m + <span class="hljs-number">1</span>) &#123;<br>            res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, pre);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Info pre = <span class="hljs-built_in">Info</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find_first</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, f, pre);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f, Info &amp;suf)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; R || r &lt; L) &#123;<br>            <span class="hljs-keyword">return</span> l - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">f</span>(info[p] + suf)) &#123;<br>                suf = info[p] + suf;<br>                <span class="hljs-keyword">return</span> l - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l == r)<br>                <span class="hljs-keyword">return</span> r;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">push</span>(p);<br>            <span class="hljs-type">int</span> res;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>] + suf)) &#123;<br>                res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, suf);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                suf = info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>] + suf;<br>                res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, suf);<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push</span>(p);<br>        <span class="hljs-type">int</span> res = m;<br>        <span class="hljs-keyword">if</span> (R &gt; m) &#123;<br>            res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, suf);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (L &lt;= m &amp;&amp; res == m) &#123;<br>            res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, suf);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Info suf = <span class="hljs-built_in">Info</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find_last</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, f, suf);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tag</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-type">const</span> Tag &amp;t)</span> &amp;</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-type">const</span> Tag &amp;t)</span> &amp;</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>&#125;;<br><br>Info <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Info &amp;a, <span class="hljs-type">const</span> Info &amp;b)<br>&#123;<br>    Info res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">auto</span> f = [&amp;](<span class="hljs-type">const</span> Info &amp;info) &#123;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Data Structure</category>
      
      <category>线段树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DSU</title>
    <link href="/2024/08/02/DSU/"/>
    <url>/2024/08/02/DSU/</url>
    
    <content type="html"><![CDATA[<h1 id="DSU（并查集）"><a href="#DSU（并查集）" class="headerlink" title="DSU（并查集）"></a>DSU（并查集）</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; p, siz;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">p</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">siz</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    &#123;<br>        std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> p[x] == x ? x : p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        siz[x] += siz[y];<br>        p[y] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Data Structure</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fenwick</title>
    <link href="/2024/08/02/Fenwick/"/>
    <url>/2024/08/02/Fenwick/</url>
    
    <content type="html"><![CDATA[<h1 id="Fenwick"><a href="#Fenwick" class="headerlink" title="Fenwick"></a>Fenwick</h1><ul><li><strong><em>int find_first(T sum)</em></strong> 找到第一个前缀和是 $sum$ 的下标</li><li><strong><em>int find_last(T sum)</em></strong> 找到最后一个前缀和是 $sum$ 的下标</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fenwick</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;T&gt; tr;<br><br>    <span class="hljs-built_in">Fenwick</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">tr</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>            tr[i] += c;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, T c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(l, c);<br>        <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> &lt;= n)<br>            <span class="hljs-built_in">modify</span>(r + <span class="hljs-number">1</span>, -c);<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        T res = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            res += tr[i];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r) - <span class="hljs-built_in">query</span>(l - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt; sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(T sum)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        T val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = std::__lg(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> ((ans | (<span class="hljs-number">1</span> &lt;&lt; i)) &lt;= n &amp;&amp; val + tr[ans | (<span class="hljs-number">1</span> &lt;&lt; i)] &lt;= sum) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; i;<br>                val += tr[ans];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Data Structure</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SegmentTree1（单点修改区间查询）</title>
    <link href="/2024/08/02/SegmentTree-%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/08/02/SegmentTree-%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="SegmentTree1（单点修改区间查询，不含懒标记）"><a href="#SegmentTree1（单点修改区间查询，不含懒标记）" class="headerlink" title="SegmentTree1（单点修改区间查询，不含懒标记）"></a>SegmentTree1（单点修改区间查询，不含懒标记）</h1><p>定义结构体 $Info$ 并重载其加号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span>&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;Info&gt; info;<br><br>    <span class="hljs-built_in">SegmentTree</span>()<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-built_in">SegmentTree</span>(<span class="hljs-type">int</span> n, Info _init = <span class="hljs-built_in">Info</span>())<br>    &#123;<br>        <span class="hljs-built_in">init</span>(std::<span class="hljs-built_in">vector</span>&lt;Info&gt;(n, _init));<br>    &#125;<br><br>    <span class="hljs-built_in">SegmentTree</span>(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)<br>    &#123;<br>        <span class="hljs-built_in">init</span>(_init);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;Info&gt; &amp;_init)</span></span><br><span class="hljs-function">    </span>&#123;<br>        n = (<span class="hljs-type">int</span>)_init.<span class="hljs-built_in">size</span>();<br>        info.<span class="hljs-built_in">assign</span>((n &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>, <span class="hljs-built_in">Info</span>());<br>        std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; build = [&amp;](<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                info[p] = _init[l - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p, l, m);<br>            <span class="hljs-built_in">build</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">pull</span>(p);<br>        &#125;;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        info[p] = info[<span class="hljs-number">2</span> * p] + info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">const</span> Info &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            info[p] = v;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (x &lt;= m) &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p, l, m, x, v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, v);<br>        &#125;<br>        <span class="hljs-built_in">pull</span>(p);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">const</span> Info &amp;v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, p, v);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; y || r &lt; x) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) &#123;<br>            <span class="hljs-keyword">return</span> info[p];<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p, l, m, x, y) + <span class="hljs-built_in">query</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, x, y);<br>    &#125;<br><br>    <span class="hljs-function">Info <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f, Info &amp;pre)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; R || r &lt; L) &#123;<br>            <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">f</span>(pre + info[p])) &#123;<br>                pre = pre + info[p];<br>                <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l == r)<br>                <span class="hljs-keyword">return</span> r;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> res;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(pre + info[<span class="hljs-number">2</span> * p])) &#123;<br>                res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, pre);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                pre = pre + info[<span class="hljs-number">2</span> * p];<br>                res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, pre);<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> res = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (L &lt;= m) &#123;<br>            res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, pre);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (R &gt; m &amp;&amp; res == m + <span class="hljs-number">1</span>) &#123;<br>            res = <span class="hljs-built_in">find_first</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, pre);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_first</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Info pre = <span class="hljs-built_in">Info</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find_first</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, f, pre);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f, Info &amp;suf)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; R || r &lt; L) &#123;<br>            <span class="hljs-keyword">return</span> l - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">f</span>(info[p] + suf)) &#123;<br>                suf = info[p] + suf;<br>                <span class="hljs-keyword">return</span> l - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l == r)<br>                <span class="hljs-keyword">return</span> r;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> res;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>] + suf)) &#123;<br>                res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, suf);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                suf = info[<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>] + suf;<br>                res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, suf);<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> res = m;<br>        <span class="hljs-keyword">if</span> (R &gt; m) &#123;<br>            res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, L, R, f, suf);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (L &lt;= m &amp;&amp; res == m) &#123;<br>            res = <span class="hljs-built_in">find_last</span>(<span class="hljs-number">2</span> * p, l, m, L, R, f, suf);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_last</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">const</span> Info &amp;)&gt; &amp;f)</span></span><br><span class="hljs-function">    </span>&#123;<br>        Info suf = <span class="hljs-built_in">Info</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find_last</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, f, suf);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br>&#125;;<br><br>Info <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Info &amp;a, <span class="hljs-type">const</span> Info &amp;b)<br>&#123;<br>    Info res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>算法和模板</category>
      
      <category>Data Structure</category>
      
      <category>线段树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典5 Sum over Subsets（子集和问题）</title>
    <link href="/2024/07/27/%E7%BB%8F%E5%85%B85-Sum-over-Subsets-%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2024/07/27/%E7%BB%8F%E5%85%B85-Sum-over-Subsets-%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Sum-over-Subsets-子集和问题-与SOSDP"><a href="#Sum-over-Subsets-子集和问题-与SOSDP" class="headerlink" title="Sum over Subsets(子集和问题)与SOSDP"></a>Sum over Subsets(子集和问题)与SOSDP</h1><p>对于二进制数 $𝑥,𝑦$ ，若 $x &amp; y&#x3D;y$，那么我们称 $𝑥$ 是 $𝑦$ 的子集，$𝑦$ 是 $𝑥$ 的超集。</p><p>假设现在有 $0∼2^𝑛−1$ 这 $2^𝑛$ 个二进制数，每个数都有一个初始权值，如何维护每个二进制数的子集和？</p><p>暴力的有 $𝑂(3^𝑛)$ 写法。</p><p>使用 $SOSPDP$ 可以将时间复杂度降为 $O(n2^n)$ 。</p><p>转移方程为：$dp[i] &#x3D; dp[i] + dp[i\oplus(1 &lt;&lt; j)]$ 。</p><p>这个方法不仅仅可用于求子集和问题，同时也可以进行子集状态的转移。</p><p>例题：<a href="https://codeforces.com/contest/1995/problem/D">https://codeforces.com/contest/1995/problem/D</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, c, k;<br>    std::cin &gt;&gt; n &gt;&gt; c &gt;&gt; k;<br>    std::string s;<br>    std::cin &gt;&gt; s;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-number">1</span> &lt;&lt; c)</span></span>;<br>    dp[<span class="hljs-number">1</span> &lt;&lt; (s.<span class="hljs-built_in">back</span>() - <span class="hljs-string">&#x27;A&#x27;</span>)]++;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(c)</span></span>;<br>    <span class="hljs-type">int</span> mask = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j + <span class="hljs-number">1</span> &lt; n &amp;&amp; j + <span class="hljs-number">1</span> - i + <span class="hljs-number">1</span> &lt;= k) &#123;<br>            j++;<br>            <span class="hljs-keyword">if</span> (cnt[s[j] - <span class="hljs-string">&#x27;A&#x27;</span>] == <span class="hljs-number">0</span>) &#123;<br>                mask ^= (<span class="hljs-number">1</span> &lt;&lt; s[j] - <span class="hljs-string">&#x27;A&#x27;</span>);<br>            &#125;<br>            cnt[s[j] - <span class="hljs-string">&#x27;A&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> == k) &#123;<br>            dp[mask]++;<br>        &#125;<br>        cnt[s[i] - <span class="hljs-string">&#x27;A&#x27;</span>]--;<br>        <span class="hljs-keyword">if</span> (cnt[s[i] - <span class="hljs-string">&#x27;A&#x27;</span>] == <span class="hljs-number">0</span>) &#123;<br>            mask ^= (<span class="hljs-number">1</span> &lt;&lt; s[i] - <span class="hljs-string">&#x27;A&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; c); j++) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;&gt; i &amp; <span class="hljs-number">1</span>) &#123;<br>                dp[j] = dp[j] + dp[j ^ (<span class="hljs-number">1</span> &lt;&lt; i)];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = c;<br>    mask = (<span class="hljs-number">1</span> &lt;&lt; c) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; c); i++) &#123;<br>        <span class="hljs-keyword">if</span> (dp[i] == <span class="hljs-number">0</span>) &#123;<br>            ans = std::<span class="hljs-built_in">min</span>(ans, __builtin_popcount(i ^ mask));<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典4 倍增</title>
    <link href="/2024/07/26/%E7%BB%8F%E5%85%B84-%E5%80%8D%E5%A2%9E/"/>
    <url>/2024/07/26/%E7%BB%8F%E5%85%B84-%E5%80%8D%E5%A2%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h1><p>给定一个有向图，$n$ 个节点，$n$ 条边（每个点只有一条出边，不一定无环），边权为0或1，询问从每个点出发经过边权为 $0$ 的边的数量或为 $1$ 的数量恰好为 $k$ 时的终点。</p><p>如何我们暴力的在图上沿着边走，时间复杂度会达到 $O(nk)$。无法解决问题。</p><p>这时我们使用倍增，用 $f(i, j)$ 表示第 $i$ 个节点走 $2^j$ 步后到达的点，用 $g(i,j)$ 表示第 $i$ 个节点走了 $2^j$ 步后经历的边权为 $1$ 的边的数量。 这一步预处理时间复杂度为 $O(nlogk)$ ，这样在处理询问，时间复杂度为 $O(klogk)$ 。总时间复杂度 $O((n + k)logk)$ 。</p><p>倍增在处理树上、图上问题往往可以将复杂度由 $O(n)$ 降为 $O(logn)$ ，大大优化时间复杂度。</p><p>例题：2024牛客暑期多校第三次场J题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n, a, b;<br>    std::cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;<br>    std::string s;<br>    std::string ss;<br>    std::cin &gt;&gt; s;<br>    <span class="hljs-keyword">while</span> (ss.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span> * a + n) &#123;<br>        ss += s;<br>    &#125;<br>    <span class="hljs-type">int</span> m = ss.<span class="hljs-built_in">size</span>();<br><br>    std::vector&lt;std::array&lt;<span class="hljs-type">int</span>, 18&gt;&gt; <span class="hljs-built_in">f</span>(n + <span class="hljs-number">1</span>);<br>    std::vector&lt;std::array&lt;<span class="hljs-type">int</span>, 18&gt;&gt; <span class="hljs-built_in">cnt</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt0 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &lt; m &amp;&amp; cnt1 &lt; a &amp;&amp; cnt0 &lt; a) &#123;<br>            j++;<br>            <span class="hljs-keyword">if</span> (ss[j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                cnt0++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cnt1++;<br>            &#125;<br>        &#125;<br>        f[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = ((j + <span class="hljs-number">1</span>) % n) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (cnt1 == a) &#123;<br>            cnt[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cnt[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ss[i] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            cnt0--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cnt1--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">18</span>; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            f[i][j] = f[f[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];<br>            cnt[i][j] = cnt[i][j - <span class="hljs-number">1</span>] + cnt[f[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    std::string ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> p = i;<br>        <span class="hljs-type">int</span> cnt0 = <span class="hljs-number">0</span>, cnt1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">17</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-type">int</span> c1 = cnt[p][j];<br>            <span class="hljs-type">int</span> c0 = (<span class="hljs-number">1</span> &lt;&lt; j) - c1;<br>            <span class="hljs-keyword">if</span> (cnt0 + c0 &lt; b &amp;&amp; cnt1 + c1 &lt; b) &#123;<br>                cnt0 += c0;<br>                cnt1 += c1;<br>                p = f[p][j];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt0 + c0 &lt; b) &#123;<br>                ans += <span class="hljs-string">&#x27;1&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt1 + c1 &lt; b) &#123;<br>                ans += <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典3 无向边重定向处理（根号）</title>
    <link href="/2024/07/25/%E7%BB%8F%E5%85%B83-%E6%97%A0%E5%90%91%E8%BE%B9%E9%87%8D%E5%AE%9A%E5%90%91%E5%A4%84%E7%90%86/"/>
    <url>/2024/07/25/%E7%BB%8F%E5%85%B83-%E6%97%A0%E5%90%91%E8%BE%B9%E9%87%8D%E5%AE%9A%E5%90%91%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="无向图边的重定向处理"><a href="#无向图边的重定向处理" class="headerlink" title="无向图边的重定向处理"></a>无向图边的重定向处理</h1><p>给定一张无向图 $n$ 个节点和 $m$ 条边，q次询问，每次询问关于其子图，询问子图总点数不超过n。</p><p>处理时我们将整个子图处理出来往往会花费 $O(nm)$ 时间复杂度，这是无法处理的。</p><p>于是我们将无向边重定向，每条边从度数小的节点指向度数大的节点。这样我们可以证明每个节点最多只会有 $O(\sqrt{2m})$ 条出边。这时我们处理出子图就只需要 $O(n\sqrt{m})$ 时间复杂度。从而解决问题。</p><p>证明：若节点在原无向图上的度数小于等于 $\sqrt{2m}$ ，则在新图中的出度一定小于等于 $\sqrt{2m}$ 。</p><p>若节点在原无向图中的度数大于 $\sqrt{2m}$ ，由于一共只有 $m$ 条边，所以所有节点的度数和为 $2m$ ，那么度数大于 $\sqrt{2m}$ 的节点最多只有 $\sqrt{2m}$ 个，又因为我们由度数小的节点指向度数大的节点，所以最多只有 $\sqrt{2m}$ 条出边</p><p>例题：2024牛客暑期多校第二场B题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> a, b, w;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Edge &amp;t) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; t.w;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, q;<br>    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;<br>    std::vector&lt;std::array&lt;<span class="hljs-type">int</span>, 3&gt;&gt; <span class="hljs-built_in">edge</span>(m + <span class="hljs-number">1</span>);<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">d</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        std::cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        edge[i] = &#123;u, v, w&#125;;<br>        d[u]++;<br>        d[v]++;<br>    &#125;<br>    std::vector&lt;std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u = edge[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> v = edge[i][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> w = edge[i][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span> (u &gt; v) &#123;<br>            std::<span class="hljs-built_in">swap</span>(u, v);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (d[u] &gt; d[v]) &#123;<br>            adj[v].<span class="hljs-built_in">push_back</span>(&#123;u, w&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            adj[u].<span class="hljs-built_in">push_back</span>(&#123;v, w&#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    std::<span class="hljs-built_in">iota</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        <span class="hljs-type">int</span> k;<br>        std::cin &gt;&gt; k;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(k)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            std::cin &gt;&gt; b[i];<br>            vis[b[i]] = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        std::vector&lt;Edge&gt; e;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : b) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : adj[u]) &#123;<br>                <span class="hljs-keyword">if</span> (vis[v]) &#123;<br>                    e.<span class="hljs-built_in">push_back</span>(&#123;u, v, w&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">auto</span> find = [&amp;](<span class="hljs-keyword">auto</span> self, <span class="hljs-type">int</span> u) -&gt; <span class="hljs-type">int</span> &#123;<br>            <span class="hljs-keyword">if</span> (p[u] != u) &#123;<br>                p[u] = <span class="hljs-built_in">self</span>(self, p[u]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> p[u];<br>        &#125;;<br><br>        std::<span class="hljs-built_in">sort</span>(e.<span class="hljs-built_in">begin</span>(), e.<span class="hljs-built_in">end</span>());<br>        i64 res = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, v, w] : e) &#123;<br>            <span class="hljs-type">int</span> fu = <span class="hljs-built_in">find</span>(find, u), fv = <span class="hljs-built_in">find</span>(find, v);<br>            <span class="hljs-keyword">if</span> (fu != fv) &#123;<br>                p[fu] = fv;<br>                res += w;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cnt == k) &#123;<br>            std::cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;-1\n&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : b) &#123;<br>            vis[u] = <span class="hljs-number">0</span>;<br>            p[u] = u;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典2 subset-sum问题</title>
    <link href="/2024/07/24/%E7%BB%8F%E5%85%B82/"/>
    <url>/2024/07/24/%E7%BB%8F%E5%85%B82/</url>
    
    <content type="html"><![CDATA[<h1 id="subset-sum问题"><a href="#subset-sum问题" class="headerlink" title="subset-sum问题"></a>subset-sum问题</h1><p>给定 $m$ 堆石头，每堆 $a_i$ 个石头，一共n个石头。是否可以从中选出部分堆其总和为k个。</p><p>使用 $dp$ 方法解决，$dp[i][j]$ 表示在前 $i$ 个石头中选是否可以选出总数为 $j$ 结果。转移方程 $dp[i][j] &#x3D; dp[i - 1][j] | dp[i - 1][j - a_i]$ ，时间复杂度 $O(n^2)$ 。</p><p>当 $n$ 过大时 ，上述方法无法解决。注意到石头总和为 $n$ 个，那么使用二进制优化，如果有三堆数量相同，可以合并其中两堆，堆的数量 $m$ 会降到 $\sqrt{n}$，时间复杂度降为 $O(n\sqrt{n})$</p><p>更进一步，我们可以使用 $bitset$ 优化 $dp$ 过程。</p><p>例题：<a href="https://codeforces.com/problemset/problem/1381/B">https://codeforces.com/problemset/problem/1381/B</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>)</span></span>;<br>    v[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i++) &#123;<br>        mx = std::<span class="hljs-built_in">max</span>(mx, a[i]);<br>        <span class="hljs-keyword">if</span> (mx == a[i]) &#123;<br>            v[i - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-keyword">auto</span> ndp = dp;<br>        <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (v[i] == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (v[j]) &#123;<br>                    len = i - j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = len; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (dp[j - len] == <span class="hljs-number">1</span>) &#123;<br>                ndp[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        std::<span class="hljs-built_in">swap</span>(dp, ndp);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dp[n]) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经典1</title>
    <link href="/2024/07/23/%E7%BB%8F%E5%85%B81/"/>
    <url>/2024/07/23/%E7%BB%8F%E5%85%B81/</url>
    
    <content type="html"><![CDATA[<p>给定 $n$ 堆东西，每堆有 $a_i$ 个且种类不同。进行如下操作：</p><p>每次从 $n$ 堆东西中选出 $k$ 堆，每堆取走一个。</p><p>询问最多能进行多少次操作。</p><p>结论：设 $x$ 为操作次数，则 $\sum_{i&#x3D;1}^nmin(a_i, x) \geq kx$ 为 $x$ 合法的充分必要条件。</p><p>必要性显然，下证充分性。</p><p>每次将东西最多的 $k$ 个堆取出一个。贪心成立性的原因在于每次相当于每次将 $a_1, a_2, . . . , a_n$中最大的 $k$ 个元素减一，更新后的数组 $a_i^{‘}$ 满足 $∑^n_{ i&#x3D;1} min(a ^′_i , x − 1) ≥ (x − 1)k$。由数学归纳法可知正确性。</p><p>同时我们可以知道当可以取 $x$ 次一定可以取 $x - 1$ 次，则说明答案具有二段性，可以二分答案找出其中的可操作次数的最大值。</p><p>例题：2024牛客暑期多校第三场A题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n, L, R;<br>    std::cin &gt;&gt; n &gt;&gt; L &gt;&gt; R;<br>    <span class="hljs-function">std::vector&lt;i64&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        a[i] = (a[i] - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br><br>    i64 cnt = (n - R + (R - L - <span class="hljs-number">1</span>)) / (R - L);<br>    i64 l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1E9</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        i64 mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        i64 sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += std::<span class="hljs-built_in">min</span>(a[i], mid);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum &gt;= mid * L) &#123;<br>            l = mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (l &gt;= cnt) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>竞赛</category>
      
      <category>经典题型和trick</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>牛客 2024暑期多校第三场题解</title>
    <link href="/2024/07/23/%E7%89%9B%E5%AE%A2-2024%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/07/23/%E7%89%9B%E5%AE%A2-2024%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>牛客 2024暑期多校第一场题解</title>
    <link href="/2024/07/16/%E7%89%9B%E5%AE%A2-2024%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/07/16/%E7%89%9B%E5%AE%A2-2024%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="A-A-Bit-Common"><a href="#A-A-Bit-Common" class="headerlink" title="A A Bit Common"></a>A A Bit Common</h1><p>我们将数字集合分为两个集合，一个集合内为最低位为0，记为 $S_0$。另一个集合内为最低位为1，记为$S_1$。</p><p>我们划分 $k$ 个数在集合 $S_1$ 中，则集合 $S_0$ 中有 $n - k$ 个数。由于最终子序列 $AND$ 在一起为1，所有集合 $S_0$ 中的数一定不在子序列中。</p><p>考虑集合 $S_0$ 中除了最低位必须为0，没有其他限制，所以每个数有 $2^{m - 1}$ 种方案，一共 $(2^{m - 1})^{n - k}$ 种。</p><p>子序列一定是集合 $S_1$ 的子集，由于 $AND$ 的性质，将集合 $S_1$ 中不在子序列中的数加入子序列，结果依然为1。所以可以直接将子序列认定为集合 $S_1$ 。即只要所有二进制最低位为 1 的数 $AND$ 和是 1 就能满足条件。</p><p>集合 $S_1$ 这些数除了最低位的 AND 和 都要是 0，也就是每一位上这些数都至少有一个是 0。考虑使得一位 $AND$ 为0，有 $2^k-1$ 种方案，一共 $m - 1$ 位，所以集合 $S_1$ 共 $(2^k - 1) ^ {m - 1}$ 种方案。</p><p>最后考虑到从 $n$ 个数中选出 $k$ 个在集合 $S_1$ 中，即 $C_n^k$ 种方案。</p><p>最终方案数是 $C_n^k(2^{m-1})^{n-k}(2^k-1)^{m-1}$ ，对 k 从 1 到 n 求和即可。</p><p>由于模数不一定互质，使用递推法求组合数。时间复杂度 $O(n^2)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>)<br>            res = (i64)res * a % p;<br>        a = (i64)a * a % p;<br>        k = k &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, mod;<br>    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;<br><br>    std::vector&lt;std::vector&lt;i64&gt;&gt; <span class="hljs-built_in">c</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;i64&gt;(n + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (!j) &#123;<br>                c[i][j] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    i64 ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> m2 = <span class="hljs-built_in">qmi</span>(<span class="hljs-number">2</span>, m - <span class="hljs-number">1</span>, mod);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ans = (ans + (c[n][i] * <span class="hljs-built_in">qmi</span>(m2, n - i, mod) % mod) * <span class="hljs-built_in">qmi</span>(<span class="hljs-built_in">qmi</span>(<span class="hljs-number">2</span>, i, mod) - <span class="hljs-number">1</span>, m - <span class="hljs-number">1</span>, mod) % mod) % mod;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-A-Bit-More-Common"><a href="#B-A-Bit-More-Common" class="headerlink" title="B A Bit More Common"></a>B A Bit More Common</h1><p>同题 A 将数字集合分为两个集合 $S_0$ 和 $S_1$ ，我们划分 $k$ 个数在集合 $S_1$ 中，则集合 $S_0$ 中有 $n - k$ 个数。由于最终两个子序列 $AND$ 在一起分别为1，所有集合 $S_0$ 中的数一定不在任意一个子序列中。</p><p>考虑集合 $S_0$ 中除了最低位必须为0，没有其他限制，所以每个数有 $2^{m - 1}$ 种方案，一共 $(2^{m - 1})^{n - k}$ 种。</p><p>一个子序列一定是集合 $S_1$ 的真子集（两个子序列不可能同时为 $S_1$），由于 $AND$ 的性质，将集合 $S_1$ 中不在子序列中的数加入子序列，结果依然为1，这样就可以组成另一个子序列。所以 B 题可以转化为求集合 $S_1$ 中存在真子集 $AND$ 结果为1的方案数。</p><p>考虑 A 题中已经得到集合 $S_1$ 中存在子集 $AND$ 结果为1的方案数，为$(2^k - 1) ^ {m - 1}$ 种，减去方案中合法子集一定为集合 $S_1$ 本身的方案数即可。</p><p>要让集合 $S_1$ 中每个的集合成员都一定要在子序列中，则在 $m-1$ 位中一定有几位只有在这个数的位置上为0，而其余 $k-1$ 个集合成员在这一位为1。</p><p>我们每次从 $m-1$  位中选出 $j$ 位，表示这 $j$ 位只在 $k$ 个数中某一位为0，其余为1，且 $k$ 个数至少分到 $j$ 个中的一位。这就是将不同的小球放在不同的盒子中，且盒子不能为空，答案为 $S[j][k] * k!$ ，其中 $S$ 表示第二类斯特林数。剩下的 $m - 1 - j$ 位只要保证 $k$ 个数中存在至少两个数这一位位为0即可，即为 $(2^k-1-k)^{m-1-j}$ 种方案。</p><p>所有不满足条件的总方案数为 $\sum_k^{m-1} C_{m-1}^jS[j][k]*k!(2^k-1-k)^{m-1-j}$ ，减去这部分得到 $S_1$ 集合的合法方案数，即$$(2^k - 1) ^ {m - 1} - \sum_k^{m-1} C_{m-1}^jS[j][k]*k!(2^k-1-k)^{m-1-j} (k \le j\le m-1)$$</p><p>将 $k$ 从2循环到n求和即可，得到</p><p>$$\sum_2^n (C_n^k(2^{m - 1})^{n - k} * ((2^k - 1) ^ {m - 1} - \sum_k^{m-1} (C_{m-1}^jS[j][k]*k!(2^k-1-k)^{m-1-j})))$$</p><p>预处理出组合数，斯特林数，以及对应的2的幂次，注意取模，时间复杂度 $O(nm)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>)<br>            res = (i64)res * a % p;<br>        a = (i64)a * a % p;<br>        k = k &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5001</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, mod;<br>    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;<br><br>    std::vector&lt;std::vector&lt;i64&gt;&gt; <span class="hljs-built_in">c</span>(N, std::<span class="hljs-built_in">vector</span>&lt;i64&gt;(N));<br>    std::vector&lt;std::vector&lt;i64&gt;&gt; <span class="hljs-built_in">S</span>(N, std::<span class="hljs-built_in">vector</span>&lt;i64&gt;(N));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (!j) &#123;<br>                c[i][j] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>    S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; N; j++) &#123;<br>            S[i][j] = (S[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + j * S[i - <span class="hljs-number">1</span>][j]) % mod;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">std::vector&lt;i64&gt; <span class="hljs-title">A</span><span class="hljs-params">(N)</span>, <span class="hljs-title">B</span><span class="hljs-params">(N)</span></span>;<br>    A[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        A[i] = A[i - <span class="hljs-number">1</span>] * i % mod;<br>    &#125;<br><br>    B[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        B[i] = B[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> % mod;<br>    &#125;<br><br>    i64 ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        i64 a = <span class="hljs-built_in">qmi</span>(((B[i] - <span class="hljs-number">1</span>) % mod + mod) % mod, m - <span class="hljs-number">1</span>, mod);<br>        i64 d = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> cur = ((B[i] - <span class="hljs-number">1</span> - i) % mod + mod) % mod;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m - <span class="hljs-number">1</span>; j &gt;= i; j--) &#123;<br>            <span class="hljs-keyword">if</span> (m - <span class="hljs-number">1</span> - j &gt; <span class="hljs-number">0</span>) &#123;<br>                d = d * cur % mod;<br>            &#125;<br>            i64 b = ((c[m - <span class="hljs-number">1</span>][j] * S[j][i] % mod) * A[i] % mod) * d % mod;<br>            a = ((a - b) % mod + mod) % mod;<br>        &#125;<br>        i64 res = ((i64)c[n][i] * <span class="hljs-built_in">qmi</span>(B[m - <span class="hljs-number">1</span>], n - i, mod) % mod) * a % mod;<br>        ans = (ans + res) % mod;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// std::cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>        <span class="hljs-built_in">solve</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客</category>
      
      <category>2024暑期多校</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>牛客 2024暑期多校题解</title>
    <link href="/2024/07/07/%E7%89%9B%E5%AE%A2-2024%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/07/07/%E7%89%9B%E5%AE%A2-2024%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>记录一下牛客 2024 暑期多校题解。</p>]]></content>
    
    
    <categories>
      
      <category>牛客</category>
      
      <category>2024暑期多校</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/07/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/05/hello-world/"/>
    <url>/2024/07/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
